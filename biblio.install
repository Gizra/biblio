<?php
/**
 * @file
 * Install file for the biblio module.
 */

/**
 * Implements hook_install().
 */
function biblio_install() {
  _biblio_install_add_biblio_roles();
}

/**
 * Implements hook_enable()
 */
function biblio_enable() {
  biblio_add_publication_types();
  biblio_create_fields_by_bundle();
}

/**
 * Add biblio roles vocabulary and terms.
 */
function _biblio_install_add_biblio_roles() {
  if (!$vocabulary = taxonomy_vocabulary_machine_name_load('biblio_roles')) {
    $vocabulary = new stdClass();
    $vocabulary->name = 'Biblio roles';
    $vocabulary->machine_name = 'biblio_roles';
    taxonomy_vocabulary_save($vocabulary);
  }

  $term = new stdClass();
  $term->name = "Author";
  $term->vid = $vocabulary->vid;
  taxonomy_term_save($term);

  $term = new stdClass();
  $term->name = "Editor";
  $term->vid = $vocabulary->vid;
  taxonomy_term_save($term);
}


/**
 * Snapshot of the schema for biblio_update_7300().
 */
function biblio_schema_7300() {
  $schema['biblio'] = array(
    'fields' => array(
      'bid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => '',
        'unsigned' => TRUE,
      ),
      'title' => array(
        'description' => 'The title of this Biblio, always treated as non-markup plain text.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'type' => array(
        'description' => 'The publication type of the biblio',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'The Drupal user ID who created this biblio.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => '',
      ),
      'changed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => '',
      ),
      'cache_id' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'md5 of the style name and style options.',
      ),
      'cache' => array(
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
        'description' => 'The full HTML cache of the rendered Biblio, per its cache ID.',
      ),
    ),
    'primary key' => array('bid'),
    'indexes' => array(
      'bid' => array('bid'),
    ),
  );

  $schema['biblio_contributor'] = array(
    'description' => 'Relational table linking authors to biblio entries',
    'fields' => array(
      'cid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'description' => 'Biblio Contributor ID. Unique ID for the contributor entity type.',
      ),
      'name' => array(
        'description' => 'The name of the contributor.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'type' => array(
        'description' => 'The bundle name of the contributor entity',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => '',
      ),
      'changed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => '',
      ),
    ),
    'foreign keys' => array(
      'biblio' => array(
        'table' => 'biblio',
        'columns' => array('bid' => 'bid'),
      ),
    ),
    'primary key' => array(
      'cid',
    ),
  );

  $schema['biblio_collection'] = array(
    'description' => t('Relational table grouping biblio nodes into collections'),
    'fields' => array(
      'cid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
        'description' => t('Primary Key: The {biblio_collection_data}.cid of the collection')
      ),
      'vid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
        'description' => t('Primary Key: The {biblio}.vid of the node.'),
      ),
      'pid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
        'description' => t('The parent id of the collection')
      ),
      'bid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
        'description' => t('The {biblio}.bid of the node.'),
      ),
    ),
    'primary key' => array('cid', 'vid'),
    'indexes' => array(
      'pid' => array('pid'),
      'bid' => array('bid'),
    ),
  );
  $schema['biblio_collection_type'] = array(
    'description' => t('Descriptions of the collections.'),
    'fields' => array(
      'cid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
        'description' => t('Primary Key: The id of the collection')
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The name of the collection'),
      ),
      'description' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The description of the collection'),
      ),
    ),
    'primary key' => array('cid'),
    'indexes' => array(
      'name' => array('name'),
    ),
  );

  $schema['biblio_type'] = array(
    'description' => 'Stores information about the biblio types.',
    'fields' => array(
      'type' => array(
        'description' => 'The machine-readable name of this type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The human-readable name of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'translatable' => TRUE,
      ),
      'description' => array(
        'description' => 'A brief description of this type.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
        'translatable' => TRUE,
      ),
    ),
    'primary key' => array('type'),
  );

  return $schema;
}

/**
 * Implements hook_schema().
 */
function biblio_schema() {
  return biblio_schema_7300();
}

/**
 * Upgrade schema to 3.x.
 *
 * We are not creating the Biblio types here, as we can't rely on Biblio being
 * enabled.
 */
function biblio_update_7300() {
  // Rename the old biblio tables.
  $old_biblio_tables = array(
    'biblio',
    'biblio_collection',
    'biblio_collection_type',
    'biblio_contributor',
    'biblio_contributor_data',
    'biblio_contributor_type',
    'biblio_contributor_type_data',
    'biblio_duplicates',
    'biblio_field_type',
    'biblio_field_type_data',
    'biblio_fields',
    'biblio_import_cache',
    'biblio_keyword',
    'biblio_keyword_data',
    'biblio_type_maps',
    'biblio_types',
    'biblio_vtabs',
  );
  foreach ($old_biblio_tables as $table) {
    db_rename_table($table, "_{$table}_1x");
  }

  $schema = biblio_schema_7300();
  foreach ($schema as $table => $table_schema) {
    db_create_table($table, $table_schema);
  }

  // Enable the new needed modules.
  if (!module_enable(array('date', 'entity', 'entityreference', 'field_collection', 'libraries'))) {
    throw new DrupalUpdateException('Date, Entity reference, Field collection and Libraries modules must be present for Biblio 2.x.');
  }

  _biblio_install_add_biblio_roles();

  return t('Old biblio tables were renamed and the new tables were created.');
}
