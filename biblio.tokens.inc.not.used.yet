<?php
function biblio_token_info_alter(&$data) {
  $d = $data;
}
function biblio_token_info() {
  $schema = drupal_get_schema('biblio');
  $fields = array_diff($schema['fields'], array('nid', 'vid'));
  $info['tokens']['node']['biblio'] = array(
      'name' => 'Biblio',
      'description' => t('Tokens related to Biblio nodes.'),

      );
  foreach ($fields as $key => $value) {
    $name = str_replace('biblio_', '', $key);
    $name = str_replace('_', ' ', $name);
    $name = ucwords($name);
    $info['tokens']['biblio'][$key] = array(
      'name' => t("Biblio: !name", array('!name' => $name)),
      'description' => (isset($value['description'])) ? t("!desc" , array('!desc' => $value['description'])) : '',

    );
  }
//$info['tokens']['node']['biblio'] += array($tokens);

    return $info;

 $info['types']['node']['biblio'] = array(
    'name' => t('Biblio'),
    'description' => t('Tokens related to Biblio type.'),

    );


    $node['biblio_authors'] = array(
    'name' => t("Biblio: Authors"),
    'description' => t('The first author from the entry'),
  );
  $node['biblio_type_id'] = array(
    'name' => t("Biblio: Type ID (e.g.: 100)"),
    'description' => '',
  );
  $node['biblio_type'] = array(
    'name' => t("Biblio: Type Name"),
    'description' => t('The type of publication  (e.g.: book, journal article)'),
  );
  $node['biblio_citekey'] = array(
    'name' => t("Biblio: Cite Key often used in BibTex files"),
    'description' => '',
  );

}

function biblio_tokens($type, $tokens, $data = array(), $options = array()) {
  $replacements = array();
  if ($type == 'node' && !empty($data['node']) && $data['node']->type == 'biblio') {
    $node = $data['node'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Simple key values on the node.
        case 'biblio_year':
          $replacements[$original] = check_plain($node->biblio_year);
          break;
        case 'biblio_authors':
          $replacements[$original] = check_plain($node->biblio_contributors[0]['lastname']);;
          break;
        case 'biblio_type_id':
          $replacements[$original] = check_plain($node->biblio_type);
          break;
        case 'biblio_citekey':
          $replacements[$original] = check_plain($node->biblio_citekey);
          break;
        case 'biblio_type':
          $type = db_query('SELECT name FROM {biblio_types} as t WHERE t.tid = :tid', array(':tid' => $node -> biblio_type))->fetchField();
          $replacements[$original] = check_plain($type);
          break;

      }
    }
  }

  return $replacements;
}
