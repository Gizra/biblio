<?php
/*
 * @file pubmed.module
 *
 */
function biblio_pm_cron() {

  if (variable_get('biblio_pm_auto_update', 0)) {
    $interval    = variable_get('biblio_pm_update_interval', 3600);    // defaults to once per hour
    $count_limit = variable_get('biblio_pm_update_limit', 100);         // only update 100 at a time
    $age         = variable_get('biblio_pm_age_limit', 2419200); // defaults to one month since last update
    $age_limit   = time() - $age;


    if (time() >= variable_get('biblio_pm_update_next_execution', 0)) {
      $ids = array();
      $result = db_select('biblio_pubmed', 'bpm')
          ->fields('bpm', array('bid', 'biblio_pubmed_id'))
          ->condition('biblio_pm_changed', $age_limit, '<')
          ->orderBy('bid', 'ASC')
          ->range(0, $count_limit)
          ->execute();
      foreach ($result as $pm) {
        $ids[$pm->bid] = $pm->biblio_pubmed_id;
      }
      if (count($ids)) {

        list($bids, $dups) = biblio_pm_import_ids($ids);

        if (count($bids)) {
          foreach ($bids as $bid) {
            $message = '';
            $message = t('!bid was updated due to changes originating at !url', array(
                '!bid' => l($bid, 'biblio/'. $bid),
                '!url' => l('PubMed', 'http://www.ncbi.nlm.nih.gov/pubmed/'. $ids[$bid]),
              )
            );
            watchdog('biblio_pm', $message, array(), WATCHDOG_WARNING);
          }
        }

        if (count($dups)) {
          $count = count($dups);
          $message = format_plural($count, 'One duplicate PubMed entry was checked, but no changes were found.',
              '@count PubMed entries were checked, but no changes were found.');
          watchdog('biblio_pm', $message, array('@count' => $count), WATCHDOG_INFO);

          $now = time();

          db_update('biblio_pubmed')
            ->fields(array('biblio_pm_changed' => $now))
            ->condition('bid', $dups, 'IN')
            ->execute();
        }
      }

      $message = t('There were no PubMed entries older than @age to check.', array(
          '@age' => format_interval($age),
        )
      );
      watchdog('biblio_pm', $message, array(), WATCHDOG_INFO);
      variable_set('biblio_pm_update_next_execution', time() + $interval);
    }
  }
}

function biblio_pm_form_biblio_admin_settings_alter(&$form, &$form_state) {
  module_load_include('inc', 'biblio_pm', 'biblio_pm.admin');
  $form += biblio_pm_settings_form();
}
function biblio_pm_form_biblio_form_alter(&$form, &$form_state, $form_id) {
  if ((!isset($form_state['biblio_type']) || empty($form_state['biblio_type'])) && !isset($form_state['biblio']->bid)) {
    $form['biblio_pubmed_lookup'] = array(
        '#type' => 'fieldset',
        '#title' => t('PubMed Lookup'),
        '#weight' => -20,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );

    $form['biblio_pubmed_lookup']['PMID'] = array(
        '#type' => 'textfield',
        '#title' => t('PubMed ID'),
        '#required' => FALSE,
        '#default_value' => '',
        '#description' => t('Enter a PubMed ID</b>'),
        '#size' => 60,
        '#maxlength' => 255,
        '#weight' => -4
    );
    $form['biblio_pubmed_lookup']['pubmed_submit'] = array(
        '#type' => 'submit',
        '#value' => t('Populate using PubMed'),
        '#submit' => array('biblio_pm_form_biblio_form_submit')
    );
   // $form['#submit'] = array_merge(array('biblio_pm_form_biblio_node_form_submit'), isset($form['#submit'])?$form['#submit']:array()); // put my validator first
  }
  if (isset($form_state['values']['biblio_pubmed_id'])) {
    $form['biblio_pubmed_id'] = array('#type' => 'value', '#value' => $form_state['values']['biblio_pubmed_id']);
  }
  if (isset($form_state['values']['biblio_pubmed_md5'])) {
    $form['biblio_pubmed_md5'] = array('#type' => 'value', '#value' => $form_state['values']['biblio_pubmed_md5']);
  }
}

function biblio_pm_form_biblio_form_submit($form, &$form_state) {
  $node_data = array();
  if (strlen($pmid = $form_state['values']['PMID'])) {
    if (!($dup = biblio_pm_check_pmid($pmid))) {
      module_load_include('php', 'biblio_pm', 'EntrezClient');
      module_load_include('php', 'biblio_pm', 'EntrezPubmedArticle');
      module_load_include('inc', 'biblio', 'includes/biblio.import.export');
      $Eclient = new BiblioEntrezClient;
      try {
        $result = $Eclient->fetch($pmid);
      } catch (Exception $e) {
        form_set_error($e->getMessage());
      }
      if (!isset($result->PubmedArticle)) {
        unset($form_state['values']['biblio_type']);
        unset($form_state['post']['biblio_type']);
        form_set_error('PMID', 'No data available for PubMed ID: ' . check_plain($pmid));
        return;
      }
      $data = new BiblioEntrezPubmedArticle($result->PubmedArticle);
      $node_data = $data->getBiblio();
      $biblio = biblio_create($node_data['biblio_type'], $node_data);
      $biblio->biblio_keywords = $node_data['biblio_keywords'];
    }
    else {
      $message = t('The PubMed ID that you are trying to import already exists in the database, see !url', array('!url' => l('node/' . $dup, 'node/' . $dup)));
      form_set_error('PMID', $message);
      $form_state['rebuild'] = TRUE;
      $form_state['submitted'] = FALSE;
      unset($form_state['values']['biblio_type']);
    }
  }
  if (!empty($node_data)) {
    $form_state['values'] = array_merge($form_state['values'], $node_data);
    $form_state['input']['biblio_type'] = $form_state['biblio_type'] = $node_data['biblio_type'];
    $form_state['biblio_imported'] = $biblio;
    $form_state['biblio_imported_contributors'] = $node_data['biblio_contributors'];
    $form_state['rebuild'] = TRUE;
  }

    return;
}

function biblio_pm_biblio_import_options() {
  return array(
  	'biblio_pm'  => t('PubMed ID List'),
    'biblio_pm_xml' => t('PubMed XML')
  );
}

function biblio_pm_biblio_import($file, $terms = array(), $batch = FALSE, $session_id = NULL, $save = TRUE, $string = FALSE) {
  $bids = array();
  $dups = array();
  $pmids = file($file->uri, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
  if (empty($pmids)) {
    drupal_set_message(t("Could not open PubMed ID file"), 'error');
    return;
  }
  return biblio_pm_import_ids($pmids, $terms, $batch, $session_id);
}

function biblio_pm_xml_biblio_import($file, $terms = array(), $batch = FALSE, $session_id = NULL) {
  libxml_use_internal_errors(true);
  $xml = @simplexml_load_file($file->uri);
  if(empty($xml) || isset($xml->body->pre->ERROR)) {
    drupal_set_message("Could not parse file as PubMed XML", 'error');
    return;
  }
  return _biblio_pm_create_node_from_xml($xml, $terms, $batch, $session_id);
}

function biblio_pm_import_ids($pmids, $terms = array(), $batch = FALSE, $session_id = NULL) {
  module_load_include('php', 'biblio_pm', 'EntrezClient');
  $retmax = 100;
  $resmax = count($pmids);
  $start = 0;
  $Eclient = new BiblioEntrezClient;
  $Eclient->post($pmids);
  $Eclient->setReturnMax($retmax);
  $bids = array();
  $dups = array();
  while ($start < $resmax && ($result = $Eclient->fetchRecords($start))) {
    $start += count($result->xpath('//PubmedArticle'));
    list($bid, $dup) =  _biblio_pm_create_node_from_xml($result, $terms, $batch, $session_id);
    $bids = array_merge($bids, $bid);
    $dups = array_merge($dups, $dup);
  }

  return array($nids, $dups);
}

function _biblio_pm_create_node_from_xml($xml, $terms, $batch, $session_id) {
  module_load_include('php', 'biblio_pm', 'EntrezPubmedArticle');
  $bids = array();
  $dups = array();
  $data = new BiblioEntrezPubmedArticle();

  foreach ($xml->xpath('//PubmedArticle') as $article) {
    $raw_biblio = $data->setArticle($article)->getBiblioAsObject();
    $biblio = biblio_create($raw_biblio->biblio_type, (array)$raw_biblio);
    $biblio->biblio_keywords = $raw_biblio->biblio_keywords;
    $wrapper = biblio_wrapper($biblio);
    if (isset($biblio)) {
      $dup = biblio_pm_check_md5($biblio->biblio_pubmed_id,
        $biblio->biblio_pubmed_md5);
      $action = variable_get('biblio_pm_dup_action', 'replace');
      if ($dup < 0 && $action == 'newrev') { //entry has be imported before, but may have changed
        // Load the node in order to preserve all its data and merge the new
        // data from pubmed.
        // Entity API doesn't support revisions at time of current Biblio 7.x-2.x development
        // $node = (object) array_merge((array)node_load(-$dup), (array)$node);
        // $node->nid = -$dup;
        // $node->revision = 1;
        // $curr_date = format_date(time());
        // $node->log = t("Automatically updated on !date due to changes at source", array('!date' => $curr_date));
        // $dup = NULL;
      }
      if ($dup < 0 && $action == 'replace') { //entry has be imported before, but may have changed
        $biblio->bid = -$dup;
        $dup = NULL;
      }
      if (!$dup) {
        // Allows other modules to alter the biblio before it is being saved. (Note: $article is a SimpleXML object)
        drupal_alter('biblio_pm_biblio', $biblio, $article);
        biblio_save_node($biblio, $terms, $batch, $session_id);
        if (!empty($biblio->bid)) $bids[] = $biblio->bid;
      }
      else {
        $dups[] = $dup;
      }
      $biblio = NULL;
    }
  }
  return array($bids, $dups);
}

function biblio_pm_check_pmid($pmid) {
    return db_query("SELECT bid FROM {biblio_pubmed} WHERE biblio_pubmed_id = :pmid", array(':pmid' => $pmid))->fetchField();
}
function biblio_pm_biblio_lookup_link_settings() {
  return array('pubmed'  => t('PubMed'));
}

function biblio_pm_biblio_lookup_link($node) {
  $show_link = variable_get('biblio_lookup_links', array('pubmed' => TRUE));
  if (!isset($show_link['pubmed']) ||
      !$show_link['pubmed'] ||
      !isset($node) ||
      $node->type != 'biblio' ||
      !isset($node->biblio_pubmed_id)) {
    return array();
  }

  $link  = 'http://www.ncbi.nlm.nih.gov/pubmed/' . $node->biblio_pubmed_id . '?dopt=Abstract';
  $attrs = array('title' => t("Click to view the PubMed listing for this node"));
  if (variable_get('biblio_links_target_new_window', null)){
    $attrs = array_merge($attrs, array('target'=>'_blank'));
  }
  return array('biblio_pubmed' => array(
        'title'      => t('PubMed'),
        'href'       => $link,
        'attributes' => $attrs,
  ));
}

function biblio_pm_entity_view($entity, $type, $view_mode, $langcode) {
  if ($type == 'biblio' && isset($biblio->biblio_pubmed_id)) {
    switch ($view_mode) {
      case 'full':
      case 'teaser':
        $biblio->content['links']['biblio_pubmed'] = array(
          '#links' => biblio_pm_biblio_lookup_link($biblio),
          '#attributes' => array('class' => array('links', 'inline')),
        );
    }
  }
}

function biblio_pm_entity_delete($entity, $type) {
  if ($type != 'biblio') {
    return;
  }
  db_delete('biblio_pubmed')
    ->condition('bid', $entity->bid)
    ->execute();
}


function biblio_pm_entity_insert($entity, $type) {
  if ($type != 'biblio') {
    return;
  }
  if (isset($entity->biblio_pubmed_id) && !empty($entity->biblio_pubmed_id)) {
    $entity->biblio_pm_changed = time();
    drupal_write_record('biblio_pubmed', $entity);
  }
}

function biblio_pm_entity_update($entity, $type) {
  if (isset($entity->biblio_pubmed_id) && !empty($entity->biblio_pubmed_id)) {
    $entity->biblio_pm_changed = time();
    drupal_write_record('biblio_pubmed', $entity, 'bid');
  }
}

function biblio_pm_entity_load($entities, $type) {
  if ($type != 'biblio') {
    return;
  }
  $result = db_select('biblio_pubmed', 'bpm')
        ->fields('bpm', array('bid', 'biblio_pubmed_id'))
        ->condition('bid', array_keys($entities))
        ->execute();

 // $result = db_query('SELECT  biblio_pubmed_id  FROM {biblio_pubmed} WHERE nid IN(:nids)', array(':nids' => array_keys($nodes)));
  foreach ($result as $record) {
    $entities[$record->bid]->biblio_pubmed_id = $record->biblio_pubmed_id;
  }
}

function biblio_pm_check_md5($pmid, $md5) {
  static $pm_md5s = array();
  static $pm_bids = array();
  if (empty($pm_md5s)) {
    $result = db_query("SELECT * FROM {biblio_pubmed} ");
    foreach ($result as $row ) {
      $pm_md5s[$row->biblio_pubmed_md5] = $row->bid;
      $pm_bids[$row->biblio_pubmed_id] = $row->bid;
    }
  }
  if (isset($pm_bids[$pmid]) && isset($pm_md5s[$md5])) { // must be an exact duplicate of an existing node (return the bid)
      return $pm_md5s[$md5];
  }
  elseif (isset($pm_bids[$pmid]) && !isset($pm_md5s[$md5])) { //pmid has been save previously but content must have changed (return negative bid)
    return -$pm_bids[$pmid];
  }
  else {
    $pm_md5s[$md5]  = TRUE; // gaurd against duplicates in the same import
    $pm_bids[$pmid] = TRUE;
    return;
  }
}
