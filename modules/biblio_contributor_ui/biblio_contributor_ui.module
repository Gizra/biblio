<?php

/**
 * @file
 * Main file for the Biblio contributor UI module.
 */

/**
 * Implements hook_menu().
 */
function biblio_contributor_ui_menu() {
  $items = array();

  $items['admin/biblio-contributor'] = array(
    'title' => 'Biblio contributor',
    'access arguments' => array('manage biblio contributor'),
    'page callback' => array('views_embed_view'),
    'page arguments' => array('biblio_contributor'),
  );

  $items['admin/biblio-contributor/add'] = array(
    'title' => 'Add biblio contributor',
    'access arguments' => array('create biblio contributor entry'),
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('biblio_contributor_ui_create_form'),
    'type' => MENU_LOCAL_ACTION,
  );

  $items['biblio-contributor/%biblio_contributor'] = array(
    'title' => 'View',
    'page callback' => array('biblio_contributor_ui_entry_display'),
    'page arguments' => array(1),
    'access arguments' => array('view biblio contributor entry'),
  );

  $items['biblio-contributor/%biblio_contributor/view'] = array(
    'title' => 'View',
    'access arguments' => array('view biblio contributor entry'),
    'page callback' => array('biblio_contributor_ui_entry_display'),
    'page arguments' => array(1),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => '50',
  );

  $items['biblio-contributor/%biblio_contributor/edit'] = array(
    'title' => 'Edit',
    'description arguments' => array(1, 'edit'),
    'access arguments' => array('edit biblio contributor entry'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('biblio_contributor_ui_create_form', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => '60',
  );

  $items['biblio-contributor/%biblio_contributor/delete'] = array(
    'title' => 'Delete',
    'description callback' => 'biblio_contributor_ui_description_callback',
    'description arguments' => array(1, 'delete'),
    'access arguments' => array('delete biblio contributor entry'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('biblio_contributor_ui_delete_form', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => '70',
  );

  if (module_exists('devel')) {
    $items['biblio-contributor/%biblio_contributor/devel'] = array(
      'title' => 'Devel',
      'page callback' => 'devel_load_object',
      'page arguments' => array('biblio-contributor', 1),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'devel.pages.inc',
      'file path' => drupal_get_path('module', 'devel'),
      'weight' => 80,
    );
  }

  return $items;
}

/**
 * Implements hook_permission().
 */
function biblio_contributor_ui_permission() {
  return array(
    'manage biblio contributor' => array(
      'title' => t('Manage biblio contributor'),
      'description' => t('Grant to the user the permission to manage biblio contributor entries via the UI.'),
    ),
    'create biblio contributor entry' => array(
      'title' => t('Create biblio contributor entry'),
      'description' => t('Grant to the user the permission to create a biblio contributor via the UI'),
    ),
    'update biblio contributor entry' => array(
      'title' => t('Update biblio contributor entry'),
      'description' => t('Grant to the user the permission to update a biblio contributor via the UI'),
    ),
    'delete biblio contributor entry' => array(
      'title' => t('Delete biblio contributor entry'),
      'description' => t('Grant to the user the permission to delete a biblio contributor via the UI'),
    ),
    'view biblio contributor entry' => array(
      'title' => t('View biblio contributor entry'),
      'description' => t('Grant to the user the permission to view a biblio contributor via the UI'),
    ),
  );
}

/**
 * Implements hook_admin_paths().
 */
function biblio_contributor_ui_admin_paths() {
  return array(
    'biblio-contributor/add' => TRUE,
    'biblio-contributor/add/*' => TRUE,
    'biblio-contributor/*/edit' => TRUE,
    'biblio-contributor/*/delete' => TRUE,
    'biblio-contributor/*/devel' => TRUE,
  );
}

/**
 * Implements hook_entity_info_alter().
 */
function biblio_contributor_entity_info_alter(&$items) {
}

/**
 * Implements hook_theme().
 */
function biblio_contributor_ui_theme() {
  return array(
    'biblio_contributor_ui_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function biblio_contributor_ui_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'biblio_contributor_ui') . '/includes/views',
  );
}

/**
 * Manage biblio contributor UI.
 */
function biblio_contributor_ui_create_form($form, &$form_state, BiblioContributor $contributor = NULL) {
  global $user;

  $account = user_load($user->uid);

  if (!$contributor) {
    $contributor = biblio_contributor_create();
  }
  $form_state['#entity'] = $contributor;

  $form['prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Prefix'),
    '#default_value' => $contributor->prefix,
  );

  $form['firstname'] = array(
    '#type' => 'textfield',
    '#title' => t('First name'),
    '#default_value' => $contributor->firstname,
  );

  $form['initials'] = array(
    '#type' => 'textfield',
    '#title' => t('Initials'),
    '#default_value' => $contributor->initials,
  );

  $form['lastname'] = array(
    '#type' => 'textfield',
    '#title' => t('Last name'),
    '#default_value' => $contributor->lastname,
  );

  $form['suffix'] = array(
    '#type' => 'textfield',
    '#title' => t('Suffix'),
    '#default_value' => $contributor->suffix,
  );

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Full name'),
    '#default_value' => $contributor->name,
  );

  $form['additional_settings'] = array(
    '#type' => 'vertical_tabs',
    '#weight' => 99,
  );

  field_attach_form('biblio_contributor', $contributor, $form, $form_state);

  $form['owner'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authoring information'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#attributes' => array(
      'class' => array('biblio-form-owner'),
    ),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'biblio_contributor_ui') . '/js/biblio_contributor_ui',
        array(
          'type' => 'setting',
          'data' => array('anonymous' => variable_get('anonymous', t('Anonymous'))),
        ),
      ),
    ),
    '#weight' => 90,
  );

  $form['owner']['publisher'] = array(
    '#type' => 'textfield',
    '#title' => t('Created by'),
    '#maxlength' => 60,
    '#autocomplete_path' => 'user/autocomplete',
    '#default_value' => !empty($contributor->uid) ? user_load($contributor->uid)->name : $account->name,
    '#weight' => -1,
    '#description' => t('Leave blank for %anonymous.', array('%anonymous' => variable_get('anonymous', t('Anonymous')))),
  );

  $form['published'] = array(
    '#type' => 'fieldset',
    '#title' => t('Published'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#weight' => 100,
  );

  $timestamp_property = empty($contributor->is_new) ? 'changed' : 'created';

  $form['published']['created'] = array(
    '#type' => 'textfield',
    '#date_format' => 'Y-m-d G:i',
    '#title' => t('Published time'),
    '#default_value' => date('Y-m-d H:i', $contributor->{$timestamp_property}),
  );

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Send'),
    ),
    'cancel' => array(
      '#markup' => l(t('Cancel'), 'biblio'),
    ),
  );

  return $form;
}

/**
 * Validate handler for the biblio contributor.
 */
function biblio_contributor_ui_create_form_validate($form, $form_state) {
  field_attach_form_validate('biblio_contributor', $form_state['#entity'], $form, $form_state);
}

/**
 * Creating/updating the biblio contributor.
 */
function biblio_contributor_ui_create_form_submit($form, &$form_state) {
  $contributor = $form_state['#entity'];
  $keys = array('prefix', 'firstname', 'initials', 'lastname', 'suffix', 'name');

  foreach ($keys as $key) {
    $contributor->{$key} = $form_state['values'][$key];
  }

  field_attach_submit('biblio_contributor', $contributor, $form, $form_state);

  $timestamp_property = empty($contributor->is_new) ? 'changed' : 'created';

  $contributor->{$timestamp_property} = strtotime($form_state['values']['created']);
  $contributor->drupal_uid = user_load_by_name($form_state['values']['publisher'])->uid;

  $contributor->save();

  $form_state['redirect'] = 'biblio-contributor/' . $contributor->cid;
}

/**
 * Displaying the biblio contributor entry.
 */
function biblio_contributor_ui_entry_display(BiblioContributor $contributor) {
  $entity = entity_view('biblio_contributor', array($contributor));

  return render($entity);
}

/**
 * Form for deleting a contributor entry.
 */
function biblio_contributor_ui_delete_form($form, $form_state, BiblioContributor $contributor) {
  $form_state['#entity'] = $contributor;

  // Always provide entity id in the same form key as in the entity edit form.
  return confirm_form($form,
    t('Are you sure you want to delete @title?',
      array('@title' => $contributor->name)),
    'biblio',
    t('Are you sure you want to delete this contributor entry? This action cannot be undone.'),
    t('Delete'),
    t('Cancel'));

  return $form;
}

/**
 * Delete the contributor entry.
 */
function biblio_contributor_ui_delete_form_submit($form, &$form_state) {
  $contributor = $form_state['#entity'];
  $contributor->delete();

  $form_state['redirect'] = 'admin/biblio-contributor';
}
