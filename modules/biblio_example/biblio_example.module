<?php

/**
 * Implements hook_ctools_plugin_directory().
 */
function biblio_example_ctools_plugin_directory($module, $plugin) {
  if ($module == 'biblio') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_init().
 */
function biblio_example_init() {
  if (!class_exists('BiblioStyleCiteProc')) {
    drupal_set_message('Clear caches for the Biblio Plugins to be registered.');
    return;
  }
}

/**
 * Implements hook_menu().
 */
function biblio_example_menu() {
  $items = array();

  $items['biblio-example/attach-fields'] = array(
    'title' => 'Attach biblio fields',
    'access callback' => TRUE,
    'page callback' => 'biblio_example_attach_fields',
  );

  $items['biblio-example/create-content'] = array(
    'title' => 'Create biblio content',
    'access callback' => TRUE,
    'page callback' => 'biblio_example_create_content',
  );

  $items['biblio-example/create-field-collection-fields'] = array(
    'title' => 'Create field collection field',
    'access callback' => TRUE,
    'page callback' => 'biblio_example_create_field_collection_fields',
  );

  $items['biblio-example/create-dummy-contributor'] = array(
    'title' => 'Create dummy contributor',
    'access callback' => TRUE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('biblio_example_create_dummy_contributor'),
  );

  return $items;
}

/**
 * Attach fields for the biblio book bundle.
 */
function biblio_example_attach_fields() {
  $field_names = array(
    'biblio_abstract',
    // Contributors reference.
    'biblio_contributor',
    // cache field.
    'biblio_cache',
    'biblio_image',
    'biblio_in_press',
    'biblio_issued',
    'biblio_pages',
    'biblio_summary_char',
  );

  foreach ($field_names as $field_name) {
    biblio_create_field($field_name, 'biblio', 'book');
  }

  $field_names = array(
    'contributor_given',
    'contributor_family',
  );

  foreach ($field_names as $field_name) {
    biblio_create_field($field_name, 'biblio_contributor', 'author');
    biblio_create_field($field_name, 'biblio_contributor', 'editor');
  }

  drupal_set_message(t('Fields were attached successfully.'));

  return '';
}

/**
 * Creating a dummy content.
 */
function biblio_example_create_content() {

  $biblio = biblio_create('book');
  $wrapper = entity_metadata_wrapper('biblio', $biblio);

  // $wrapper->biblio_issued->set(time());
  $wrapper->biblio_in_press->set(TRUE);
  $wrapper->biblio_pages->set('22-25');
  $wrapper->biblio_abstract->set('This is the abstract!');

  // Add contributor to collection.
  $name = array(
    'given' => 'Gary',
    'family' => 'King',
  );
  $biblio_contributor1 = biblio_contributor_create($name, 'author');
  $biblio_contributor1->save();

  $name = array(
    'given' => 'Maya',
    'family' => 'Sen',
  );
  $biblio_contributor2 = biblio_contributor_create($name, 'author');
  $biblio_contributor2->save();

  $wrapper->biblio_contributor[] = $biblio_contributor1;
  $wrapper->biblio_contributor[] = $biblio_contributor2;

  $biblio->title = 'How Social Science Research Can Improve Teaching.';

  $get_text = $biblio->getText('example_citeproc', array('style_name' => 'chicago-author-date'));

  $value = array(
    'value' => $get_text,
    'format' => 'full_html',
  );

  // Show the CiteProc on the screen.
  drupal_set_message($get_text);

  // Cache the output, to be used for example with Views.

  $wrapper->biblio_cache->set($value);

  $trimmed = trim(strip_tags($get_text));

  // Save the charcter we will later group the pulications by.
  $wrapper->biblio_summary_char->set($trimmed[0]);
  $wrapper->save();

  return '';
}

/**
 * Create a field collection field for the biblio contributor.
 */
function biblio_example_create_field_collection_fields() {
  if (!module_exists('field_collection')) {
    drupal_set_message(t('The field collection module was not found in your drupal installation.'), 'error');
    return '';
  }

  biblio_create_field('contributor_field_collection', 'biblio', 'book');
  biblio_create_field('biblio_contributor_roles', 'field_collection_item', 'contributor_field_collection');
  biblio_create_field('biblio_contributor_reference', 'field_collection_item', 'contributor_field_collection');

  drupal_set_message(t('The contributor fields were attached successfully'));
  return '';
}

/**
 * Create dummy contributor.
 */
function biblio_example_create_dummy_contributor($form, $form_state) {
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => 'The contributor name',
    '#required' => TRUE,
  );

  $form['actions'] = array(
    '#type' => 'action',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Create'),
    ),
  );

  return $form;
}

/**
 * Create the dummy contributor.
 */
function biblio_example_create_dummy_contributor_submit($form, &$form_state) {
  $contributor = biblio_contributor_create($form_state['values']['name'], 'author');
  $contributor->save();

  $form_state['redirect'] = 'admin/biblio/add/book';

  drupal_set_message(t('The @contributor has created successfully', array(
    '@contributor' => $form_state['values']['name'],
  )));
}

