<?php
/**
 *   biblio.module for Drupal
 *
 *   Copyright (C) 2006-2011  Ron Jerome
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License along
 *   with this program; if not, write to the Free Software Foundation, Inc.,
 *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 */

/**
 * Implements hook_access().
 */
function biblio_access($op, $node = '') {
  global $user;

  switch ($op) {
    case 'admin':
      return user_access('administer biblio');
    case 'import':
      return user_access('import from file');
    case 'export':
      return user_access('show export links');
    case 'edit_author':
        if (user_access('administer biblio') || user_access('edit biblio authors')) return NODE_ACCESS_ALLOW;
        break;
    case 'download':
      if (user_access('show download links') || (user_access('show own download links') && ($user->uid == $node->uid))) return NODE_ACCESS_ALLOW;
      break;
    case 'rss':
      return variable_get('biblio_rss', 0);
    default:
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_permission().
 *
 * Since we are limiting the ability to create new nodes to certain users,
 * we need to define what those permissions are here. We also define a permission
 * to allow users to edit the nodes they created.
 */
function biblio_permission() {
  return array(
    'administer biblio' => array(
      'title' => t('Administer Biblio'),
      'description' => t('Allows full control (create, update, delete) of all Biblio nodes'),
    ),
    'access biblio content' => array(
      'title' => t('Access Biblio content'),
      'description' => t('Allows the user to view Biblio nodes'),
    ),
   'create biblio content' => array(
     'title' => t('Create Biblio'),
     'description' => t('Allows the user to create new Biblios'),
   ),
   'edit all biblio entries' => array(
     'title' => t('Edit all Biblio entries'),
     'description' => t('Allows the user to edit ALL biblio entries regardless of who "owns" them, otherwise they are restricted to on'),
   ),
   'edit own biblio entries' => array(
     'title' => t('Edit pwn Biblio entries'),
     'description' => t('Allows the user to edit his own biblio entries'),
   ),
    'delete biblio entries' => array(
      'title' => t('Delete biblio entries'),
      'description' => t('Allows the user to delete any biblio entities'),
    ),
    'delete own biblio entries' => array(
      'title' => t('Delete own biblio entries'),
      'description' => t('Allows the user to delete his own biblio entities'),
    ),
    'edit by all biblio authors' => array(
      'title' => t('Edit by all Biblio authors'),
      'description' => t('Allows any/all of the authors associated with a biblio entry to edit the biblio entry. This requires the Drupal UserID be mapped to a Biblio author ID'),
    ),
    'edit biblio authors' => array(
      'title' => t('Edit Biblio authors'),
      'description' => t('Allows the user to edit author information'),
    ),
    'manage biblio structure' => array(
      'title' => t('Manage Biblio structure'),
      'description' => t('This determines if the user will be able to modify field and display settings for biblio and contributor entities (admin/structure/biblio)'),
    ),
    'manage biblio content' => array(
      'title' => t('Manage Biblio content'),
      'description' => t('This determines if the user will be able to access the managment interface for biblios and contributors (admin/content/biblio)'),
    ),
    'import from file' => array(
      'title' => t('Import from file'),
      'description' => t('Allows the user to import bibliographic data from files such as BibTex, RIS, EndNote'),
    ),
    'show export links' => array(
      'title' => t('Show export links'),
      'description' => t('Allows users to see links which allow export of bibliographic data for an individual entry or the entire result set'),
    ),
    'show download links' => array(
      'title' => t('Show download links'),
      'description' => t('Allows users to see links to any attachements associated with the Biblio entry'),
    ),
    'show own download links' => array(
      'title' => t('Show own download links'),
      'description' => t('Allows user to only see download links on entries for which they are the owner.'),
    ),
    'show filter tab' => array(
      'title' => t('Show filter tab'),
      'description' => t('This determines if the "Filter" tab on the Biblio list page will be shown to the user'),
    ),
    'show sort links' => array(
      'title' => t('Show sort links'),
      'description' => t('This determines if the "Sort" links on the Biblio list page will be shown to the user'),
    ),
    'view full text' => array(
      'title' => t('Show full text'),
      'description' => t('This determines if the user will be able to access the "Full Text" of the article if it is available'),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function biblio_ctools_plugin_api($module, $api) {
  if ($module == 'biblio' && $api == 'biblio_style') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function biblio_ctools_plugin_type() {
  $plugins['biblio_style'] = array(
    'classes' => array('class'),
    'process' => 'biblio_plugin_process',
  );
  return $plugins;
}


/**
 * Add defaults values to the notifier plugins.
 *
 * - 'description': The description of the plugin.
 */
function biblio_plugin_process(&$plugin, $info) {
  $plugin += array(
    'description' => '',
    'options' => array(),
    'assets' => array(
      'js' => array(),
      'css' => array(),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function biblio_ctools_plugin_directory($module, $plugin) {
  if ($module == 'biblio') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Helper function to include CTools plugins and get a notifier plguin.
 *
 * @param $plugin_name
 *   The plugin that should be laoded.
 */
function biblio_get_biblio_style($style_name) {
  ctools_include('plugins');
  return ctools_get_plugins('biblio', 'biblio_style', $style_name);
}

/**
 * Helper function to include CTools plugins and get all notifier plugins.
 */
function biblio_get_biblio_styles() {
  ctools_include('plugins');
  return ctools_get_plugins('biblio', 'biblio_style');
}

/**
 * Helper function to return all notifiers as options for a select list.
 *
 * @return array
 *  An array of biblio types for use in a field option list
 */
function biblio_get_notifiers_as_options() {
  $options = array();
  foreach (biblio_get_biblio_styles() as $style_name => $style) {
    $options[$style_name] = check_plain($style['title']);
  }

  return $options;
}

/**
 * Implements hook_views_api().
 */
function biblio_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'biblio') . '/includes/views',
  );
}

/**
 * Implements hook_migrate_api().
 */
function biblio_migrate_api() {
  $migrations = array();
  if (db_table_exists('_biblio_1x')) {
    $migrations['BiblioMigrateContributorCollections'] = array('class_name' => 'BiblioMigrateContributorCollections');
    $migrations['BiblioMigrateTypes'] = array('class_name' => 'BiblioMigrateTypes');
    $migrations['BiblioMigrateEntries'] = array('class_name' => 'BiblioMigrateEntries');
  }

  $api = array(
    'api' => 2,
    'migrations' => $migrations,
  );
  return $api;
}

/**
 * Implements hook_entity_info().
 *
 * Inform the Drupal and the Field API about entity types.
 * Uses the contrib Entity API module to create entities
 */
function biblio_entity_info() {
  $return['biblio'] = array(
    'label' => t('Biblio'),
    'entity class' => 'Biblio',
    'controller class' => 'EntityAPIController',
    'views controller class' => 'EntityDefaultViewsController',
    'base table' => 'biblio',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'bid',
      'bundle' => 'type',
      'label' => 'title',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'load hook' => 'biblio_load',
    'view modes' => array(),
    // Entity API label callback that takes a look at our entity class method defaultLabel()
    'label callback' => 'entity_class_label',
    // This is also a standard Entity API callback for uri.
    // It executes our entity defaultUri() method
    'uri callback' => 'entity_class_uri',
    'module' => 'biblio',
    'access callback' => 'biblio_entity_access',
    'views controller class' => 'BiblioViewsController',
    'metadata controller class' => 'BiblioMetadataController',
  );

  // @todo: Biblio 1.x had a biblio type called "Biblio" if type was 0.
  $return['biblio']['bundles']['biblio'] = array('label' => 'Biblio');

  if (db_table_exists('biblio_type') && $bundles = biblio_types()) {
    foreach ($bundles as $bundle) {
      $return['biblio']['bundles'][$bundle->type] = array('label' => $bundle->name);
    }
  }

  $return['biblio_contributor'] = array(
    'label' => t('Contributor'),
    'entity class' => 'BiblioContributor',
    'controller class' => 'EntityAPIController',
    'base table' => 'biblio_contributor',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'cid',
      'label' => 'name',
    ),
    'bundles' => array(
      'contributor' => array(
        'label' => t('Contributor'),
      ),
    ),
    'load hook' => 'biblio_contributor_load',
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' => FALSE,
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'module' => 'biblio',
    'access callback' => 'biblio_entity_access',
    'inline entity form' => array(
      'controller' => 'BiblioContributorInlineEntityFormController',
    ),
  );


  return $return;
}

/**
 * Get the bundles of the biblio.
 *
 * @param string $type
 *  Optional; A specific type name.
 * @return array
 *  List of biblio types.
 */
function biblio_types($type = NULL) {
  $results = db_select('biblio_type')
    ->fields('biblio_type')
    ->execute()
    ->fetchAllAssoc('type');

  if (!empty($type)) {
    return isset($results[$type]) ? $results[$type] : array();
  }

  return $results;
}

/**
 * Save biblio type.
 *
 * @todo: When changing the machine name create a batch api that will update
 *  the biblio entries to the new bundle machine name.
 *
 * @param object $biblio_type
 *  The values of a biblio type.
 */
function biblio_type_save($biblio_type) {
  if (biblio_types($biblio_type->type)) {
    db_update('biblio_type')
      ->fields(array(
        'name' => $biblio_type->name,
        'description' => $biblio_type->description,
      )
    )
    ->condition('type', $biblio_type->type)
    ->execute();
  }
  else {
    db_insert('biblio_type')
      ->fields((array)$biblio_type)
      ->execute();

    // Attach the contributors field collection to the new biblio bundle.
    biblio_create_field('contributor_field_collection', 'biblio', $biblio_type->type);

    biblio_create_field('biblio_contributor_role', 'field_collection_item', 'contributor_field_collection');
    biblio_create_field('biblio_contributor', 'field_collection_item', 'contributor_field_collection');
  }
}

/**
 * Delete a biblio bundle.
 *
 * @param string $type
 *  The value of a biblio type.
 */
function biblio_type_delete($type) {
  $query = new entityFieldQuery();
  $number = $query
    ->entityCondition('entity_type', 'biblio')
    ->propertyCondition('type', $type)
    ->count()
    ->execute();

  if ($number) {
    throw new Exception(t("You cannot delete the bundle @type because there are biblio entries of this bundle."));
  }

  db_delete('biblio_type')
    ->condition('type', $type)
    ->execute();
}

/**
 * Access callback for the entity API.
 */
function biblio_entity_access($op, $type = NULL, $account = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }
  switch ($op) {
    case 'create':
      return user_access('administer biblio', $account)
          || user_access('create biblio', $account);
    case 'view':
      return user_access('administer biblio', $account)
          || user_access('access biblio content', $account);
    case 'delete':
    case 'edit':
      return user_access('administer biblio')
          || user_access('edit all biblio entries');
  }
}

/**
 * Create a biblio entity object
 *
 * @param $type
 *  The publication type of the biblio to be created (bundle)
 * @param array $values
 *  An associative array of any additional values to be set when creating this
 *  entity. These values will be carried throughout the biblio object's life.
 *  Example: $values['type'] => 'book';
 * @return object
 *  The biblio object, with default values.
 */
function biblio_create($type, $values = array()) {
  if (empty($account)) {
    global $user;
    $account = clone $user;
  }
  $values['type'] = $type;
  $values['uid'] = $account->uid;
  $values['title'] = '';
  $values += array(
    'created' => REQUEST_TIME,
    'changed' => REQUEST_TIME,
  );

  $values['type'] = $type;
  return entity_create('biblio', $values);
}

/**
 * Load a biblio object from the database.
 *
 * @param string $bid
 *   The biblio ID.
 *
 * @return object
 *   A fully-populated node object.
 */
function biblio_load($bid) {
  return entity_load_single('biblio', $bid);
}

/**
 * Load biblio entities from the database.
 *
 * This function should be used whenever you need to load more than one biblio
 * from the database. biblios are loaded into memory and will not require
 * database access if loaded again during the same page request.
 *
 * @see entity_load()
 *
 * @param array $bids
 *   An array of biblio IDs.
 * @param bool $reset
 *   Whether to reset the internal entity_load cache.
 *
 * @return
 *   An array of biblio objects indexed by bid.
 */
function biblio_load_multiple($bids = array(), $reset = FALSE) {
  return entity_load('biblio', $bids, array(), $reset);
}

/**
 * Create a contributor entity object.
 *
 * @param string $name
 *   The name of the contributor. If given, this function will parse out the
 *   author name and automatically fill in any associated fields (first name,
 *   last name, initials, etc.) and the type
 * @param array  $values
 *
 * @return object
 *  The contributor entity object
 */
function biblio_contributor_create($values = array()) {
  global $language;

  $values['type'] = 'biblio_contributor';
  $values += array(
    'language' => $language->language,
    'created' => REQUEST_TIME,
    'changed' => REQUEST_TIME,
    'prefix' => '',
    'lastname' => '',
    'initials' => '',
    'suffix' => '',
    'firstname' => '',
  );

  return entity_create('biblio_contributor', $values);
}

/**
 * Load a contributor.
 */
function biblio_contributor_load($cid) {
  return entity_load_single('biblio_contributor', $cid);
}

/**
 * Load multiple contributors based on certain conditions.
 */
function biblio_contributor_load_multiple($cids = array()) {
  return entity_load('biblio_contributor', $cids);
}

/**
 * Attach fields to bundles.
 *
 * @param $bundles
 *   Array with the bundles to process, or empty array to use all Biblio bundles.
 */
function biblio_create_fields_by_bundle($bundles = array()) {
  $entity_info = entity_get_info('biblio');
  $bundles = $bundles ? $bundles : array_keys($entity_info['bundles']);

  $fields_info = biblio_fields_info();
  foreach ($bundles as $bundle) {
    foreach ($fields_info as $field_name => $field_info) {
      if (in_array($field_name, array('biblio_contributor_role', 'biblio_contributor'))) {
        // @todo: Add better way to distniush fields that don't need to be
        // attached to the Biblio entity.
        continue;
      }

      if (!empty($field_info['bundles_info']) && isset($field_info['bundles_info'][$bundle])) {
        // Allow per bundle settings to override the instance's default settings.
        $field_info['instance'] = drupal_array_merge_deep($field_info['instance'], $field_info['bundles_info'][$bundle]);
        biblio_create_field($field_name, 'biblio', $bundle, $field_info);
      }
      elseif (!isset($field_info['bundles_info'])) {
        biblio_create_field($field_name, 'biblio', $bundle, $field_info);
      }
    }
  }
}

/**
 * Create a biblio field in a bundle.
 *
 * @param string $field_name
 *   The field name
 * @param string $entity_type
 *   The entity type
 * @param string $bundle
 *   The bundle name.
 * @param array $biblio_field
 *   Optional; Array with field definitions, to allow easier overriding by the
 *   caller. If empty, function will get the field info by calling
 *   biblio_fields_info() with the field name.
 */
function biblio_create_field($field_name, $entity_type, $bundle, $biblio_field = array()) {
  if (!$biblio_field && !$biblio_field = biblio_fields_info($field_name)) {
    return;
  }

  $field = field_info_field($field_name);
  // Allow overriding the field name.
  $biblio_field['field']['field_name'] = $field_name;
  if (empty($field)) {
    field_create_field($biblio_field['field']);
  }

  $instance = field_info_instance($entity_type, $field_name, $bundle);
  if (empty($instance)) {
    $instance = $biblio_field['instance'];
    $instance += array(
      'field_name' => $field_name,
      'bundle' => $bundle,
      'entity_type' => $entity_type,
    );

    field_create_instance($instance);
    entity_property_info_cache_clear();
  }
}

/**
 * Get the field info.
 *
 * @param string $field_name
 *  The field name.
 *
 * @return array
 *   An array with the field and instance definitions, or FALSE if not found.
 */
function biblio_fields_info($field_name = NULL) {
  $return = &drupal_static(__FUNCTION__, array());

  if (empty($return)) {
    foreach (module_implements('biblio_fields_info') as $module) {
      if ($fields = module_invoke($module, 'biblio_fields_info')) {
        foreach ($fields as $key => $field) {
          // Add default values.
          $field += array(
            'entity type' => array(),
            'multiple' => FALSE,
            'description' => '',
          );

          // Add the module information.
          $return[$key] = array_merge($field, array('module' => $module));
        }
      }
    }

    // Allow other modules to alter the field info.
    drupal_alter('biblio_fields_info', $return);
  }

  if (!empty($field_name)) {
    return !empty($return[$field_name]) ?  $return[$field_name] : FALSE;
  }

  return $return;
}

/**
 * Implements hook_biblio_fields_info().
 */
function biblio_biblio_fields_info() {
  // Abstract.
  $items['biblio_abstract'] = array(
    'field' => array(
      'cardinality' => '1',
      'entity_types' => array(),
      'field_name' => 'biblio_abstract',
      'module' => 'text',
      'type' => 'text_long',
    ),
    'instance' => array(
      'label' => 'Publication abstract',
      'description' => 'Holds generic info the biblio.',
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'rows' => '5',
        ),
        'type' => 'text_textarea',
        'weight' => '-1',
      ),
    ),
  );

  // Citekey.
  $items['biblio_citekey'] = array(
    'field' => array(
      'cardinality' => '1',
      'entity_types' => array(),
      'field_name' => 'biblio_citekey',
      'module' => 'text',
      'type' => 'text_long',
    ),
    'instance' => array(
      'label' => 'Publication citation',
      'description' => 'Publication citation.',
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'rows' => '5',
        ),
        'type' => 'text_textarea',
        'weight' => '-1',
      ),
    ),
  );

  // Image.
  $items['biblio_image'] = array(
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_image',
      'locked' => '0',
      'module' => 'image',
      'settings' => array(
        'default_image' => 0,
        'uri_scheme' => 'public',
      ),
      'translatable' => '0',
      'type' => 'image',
    ),
    'instance' => array(
      'label' => 'The publication image',
      'description' => 'Image for the biblio',
      'settings' => array(
        'alt_field' => 0,
        'default_image' => 0,
        'file_directory' => '',
        'file_extensions' => 'png gif jpg jpeg',
        'max_filesize' => '',
        'max_resolution' => '',
        'min_resolution' => '',
        'title_field' => 0,
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'image',
        'settings' => array(
          'preview_image_style' => 'thumbnail',
          'progress_indicator' => 'throbber',
        ),
        'type' => 'image_image',
        'weight' => '-2',
      ),
    ),
  );

  // PDF file.
  $items['biblio_pdf'] = array(
    'field' => array(
      'field_name' => 'biblio_pdf',
      'type' => 'file',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'locked' => '0',
      'translatable' => '0',
      'settings' => array(
        'uri_scheme' => 'public',
      ),
    ),
    'instance' => array(
      'label' => 'The publication PDF',
      'description' => 'PDF for the biblio',
      'settings' => array(
        'file_directory' => '',
        'file_extensions' => 'pdf',
        'max_filesize' => '',
        'max_resolution' => '',
        'min_resolution' => '',
        'title_field' => 0,
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'type' => 'file_generic',
        'weight' => '-4',
      ),
    ),
  );

  // Other Numbers.
  $items['biblio_other_number'] = array(
    'field' => array(
      'cardinality' => 1,
      'field_name' => 'biblio_other_number',
      'foreign keys' => array(
        'format' => array(
          'columns' => array(
            'format' => 'format',
          ),
          'table' => 'filter_format',
        ),
      ),
      'indexes' => array(
        'format' => array(
          0 => 'format',
        ),
      ),
      'locked' => '0',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'translatable' => '0',
      'type' => 'text',
    ),
    'instance' => array(
      'default_value' => NULL,
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'text',
          'settings' => array(),
          'type' => 'text_default',
        ),
      ),
      'label' => 'Other Numbers',
      'required' => 0,
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
      ),
    ),
    // @todo: Applies to all?
    'bundles_info' => array(
      'artwork' => array(),
      'audiovisual' => array(),
      'book' => array(),
      'book_chapter' => array(),
      'bill' => array(),
      'broadcast' => array(),
      'case' => array(),
      'chart' => array(),
      'classical' => array(),
      'conference_paper' => array(),
      'conference_proceedings' => array(),
      'database' => array(),
      'film' => array(),
      'government_report' => array(),
    ),
  );

  // Publication year.
  $items['biblio_year'] = array(
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_year',
      'foreign keys' => array(),
      'indexes' => array(),
      'locked' => '0',
      'module' => 'number',
      'settings' => array(),
      'translatable' => '0',
      'type' => 'number_integer',
    ),
    'instance' => array(
      'default_value' => NULL,
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'number',
          'settings' => array(
            'prefix_suffix' => TRUE,
            'scale' => 0,
            'thousand_separator' => ' ',
          ),
          'type' => 'number_integer',
        ),
      ),
      'field_name' => 'biblio_year',
      'label' => 'Year of Publication',
      // We will enfroce required only if the Publication status is set to
      // "published".
      'required' => FALSE,
      'settings' => array(
        'max' => '9999',
        'min' => '-9999',
        'prefix' => '',
        'suffix' => '',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 0,
        'module' => 'number',
        'settings' => array(),
        'type' => 'number',
        'weight' => 0,
      ),
    ),
  );

  // First letter; can be used to store the character we would like to later
  // group the publications.
  $items['biblio_first_letter'] = array(
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_first_letter',
      'module' => 'text',
      'settings' => array(
        'max_length' => '1',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'Publication first letter',
      'description' => 'Hold the character to later the publications can be grouped by.',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '1',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
  );

  // Section.
  $items['biblio_section'] = array(
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_section',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'Section',
      'required' => FALSE,
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
    'bundles_info' => array(
      'book_chapter' => array(
        'label' => 'Chapter',
      ),
      'bill' => array(
        'label' => 'Code Section',
      ),
      'case' => array(
        'label' => 'Page Cited',
      ),
      'government_report' => array(),
    ),
  );

  // Issue.
  $items['biblio_issue'] = array(
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_issue',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'Issue',
      'required' => FALSE,
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
    'bundles_info' => array(
      'government_report' => array(),
    ),
  );

  // Number of volumes.
  $items['biblio_number_of_volumes'] = array(
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_number_of_volumes',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'Number of Volumes',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
    'bundles_info' => array(
      'audiovisual' => array(
        'label' => 'Extent of Work',
      ),
      'book_chapter' => array(),
      'book' => array(),
      'case' => array(
        'label' => 'Reporter Abbreviation',
      ),
      'classical' => array(),
      'conference_proceedings' => array(),
    ),
  );

  // Number.
  $items['biblio_number'] = array(
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_number',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'Series Volume',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
    'bundles_info' => array(
      'audiovisual' => array(),
      'book' => array(),
      'book_chapter' => array(),
      'bill' => array(
        'label' => 'Bill Number',
      ),
      'chart' => array(
        'label' => 'Number',
      ),
      'classical' => array(),
      'film' => array(
        'label' => 'Running Time',
      ),
    ),
  );

  // Pages.
  $items['biblio_pages'] = array(
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_pages',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'Publication pages',
      'description' => 'First & last page numbers of the piece. e.g. 23-25',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
    'bundles_info' => array(
      'artwork' => array(
        'label' => 'Description',
      ),
      'book' => array(
        'label' => 'Number of Pages',
      ),
      'bill' => array(
        'label' => 'Code Pages',
      ),
      'case' => array(
        'label' => 'First Page',
      ),
      'chart' => array(
        'label' => 'Description',
      ),
      'classical' => array(
        'label' => 'Number of Pages',
      ),
      'conference_proceedings' => array(
        'label' => 'Pagination',
      ),
      'government_report' => array(
        'label' => 'Pagination',
      ),
    ),
  );


  // Reprint edition.
  $items['biblio_reprint_edition'] = array(
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_reprint_edition',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'Reprint Edition',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
    'bundles_info' => array(
      'book' => array(),
      'book_chapter' => array(),
      'classical' => array(),
    )
  );

  // Call number.
  $items['biblio_call_number'] = array(
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_call_number',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'Call number',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
      // @todo: Applies to all?
      'bundles_info' => array(
        'artwork' => array(),
        'audiovisual' => array(),
        'book' => array(),
        'book_chapter' => array(),
        'bill' => array(),
        'broadcast' => array(),
        'chart' => array(),
        'classical' => array(),
        'conference_paper' => array(),
        'conference_proceedings' => array(),
        'database' => array(),
        'film' => array(),
        'government_report' => array(),
      ),
    ),
  );

  // ISBN number.
  $items['biblio_isbn'] = array(
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_isbn',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'ISBN Number',
      'description' => 'International Standard Book Number',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
    // @todo: Applies to all?
    'bundles_info' => array(
      'artwork' => array(),
      'audiovisual' => array(),
      'book' => array(),
      'book_chapter' => array(),
      'bill' => array(),
      'broadcast' => array(),
      'case' => array(),
      'chart' => array(),
      'classical' => array(),
      'conference_paper' => array(),
      'conference_proceedings' => array(),
      'database' => array(),
      'film' => array(),
      'government_report' => array(),
    ),
  );

  // Accession number
  $items['biblio_accession_number'] = array(
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_accession_number',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'Accession number',
      'description' => '',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
    // @todo: Applies to all?
    'bundles_info' => array(
      'artwork' => array(),
      'audiovisual' => array(),
      'book' => array(),
      'book_chapter' => array(),
      'bill' => array(),
      'broadcast' => array(),
      'case' => array(),
      'chart' => array(),
      'classical' => array(),
      'conference_paper' => array(),
      'conference_proceedings' => array(),
      'database' => array(),
      'film' => array(),
      'government_report' => array(),
    ),
  );

  // Keywords.
  $items['biblio_keywords'] = array(
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_keywords',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'Keywords',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
  );

  // Notes.
  $items['biblio_notes'] = array(
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_notes',
      'module' => 'text',
      'type' => 'text_long',
    ),
    'instance' => array(
      'label' => 'Notes',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
  );

  // Research notes.
  $items['biblio_research_notes'] = array(
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_research_notes',
      'module' => 'text',
      'type' => 'text_long',
    ),
    'instance' => array(
      'label' => 'Research Notes',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
  );

  // Translated title.
  $items['biblio_translated_title'] = array(
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_translated_title',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'Translated Title',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
  );

  // Summary char; can be used to store the character we would like to later
  // group the publications.
  $items['biblio_summary_char'] = array(
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_summary_char',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'Publication summary character',
      'description' => 'Hold the character to later the publications can be grouped by.',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
  );

  // Contributor fields.
  $items['contributor_field_collection'] = array(
    'field' => array(
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'field_name' => 'contributor_field_collection',
      'foreign keys' => array(),
      'indexes' => array(),
      'locked' => '0',
      'module' => 'field_collection',
      'settings' => array(
        'hide_blank_items' => 1,
        'path' => '',
      ),
      'translatable' => '0',
      'type' => 'field_collection',
    ),
    'instance' => array(
      'label' => 'Contributors',
      'required' => 0,
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 0,
        'module' => 'field_collection',
        'settings' => array(),
        'type' => 'field_collection_embed',
        'weight' => 0,
      ),
    ),
  );

  // Reference to contributor role.
  $items['biblio_contributor_role'] = array(
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_contributor_role',
      'module' => 'entityreference',
      'settings' => array(
        'handler' => 'base',
        'handler_settings' => array(
          'sort' => array(
            'type' => 'none',
          ),
          'target_bundles' => array(
            'biblio_roles' => 'biblio_roles',
          ),
        ),
        'target_type' => 'taxonomy_term',
      ),
      'translatable' => '0',
      'type' => 'entityreference',
    ),
    'instance' => array(
      'label' => 'Contributor role',
      'required' => FALSE,
      'widget' => array(
        'active' => 1,
        'module' => 'entityreference',
        'settings' => array(
          'match_operator' => 'CONTAINS',
          'path' => '',
          'size' => '60',
        ),
        'type' => 'options_select',
        'weight' => '2',
      ),
    ),
  );

  // Reference to a single contributor.
  $items['biblio_contributor'] = array(
    'field' => array(
      'active' => '1',
      'cardinality' => 1,
      'deleted' => '0',
      'entity_types' => array(),
      'field_name' => 'biblio_contributor',
      'module' => 'entityreference',
      'settings' => array(
        'handler' => 'base',
        'handler_settings' => array(
          'sort' => array(
            'type' => 'none',
          ),
          'target_bundles' => array(),
        ),
        'target_type' => 'biblio_contributor',
      ),
      'translatable' => '0',
      'type' => 'entityreference',
    ),
    'instance' => array(
      'label' => 'Contributor reference',
      'required' => 0,
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'inline_entity_form',
        'settings' => array(
          'type_settings' => array(
            'allow_existing' => TRUE,
            'match_operator' => 'CONTAINS',
          ),
        ),
        'type' => 'inline_entity_form',
        'weight' => '1',
      ),
    ),
  );

  // Short title.
  $items['biblio_short_title'] = array(
    'description' => 'Short title.',
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_short_title',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'Short title',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
    'bundles_info' => array(
      'artwork' => array(),
      'audiovisual' => array(),
      'book' => array(),
      'book_chapter' => array(),
      'bill' => array(),
      'case' => array(
        'label' => 'Abbreviated Case Name',
      ),
      'classical' => array(),
      'conference_proceedings' => array(),
      'film' => array(),
    )
  );

  // Short title.
  $items['biblio_alternate_title'] = array(
    'description' => 'Alternate Title',
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_alternate_title',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'Alternate Title',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
    'bundles_info' => array(
      'artwork' => array(),
      'audiovisual' => array(),
      'book' => array(
        'label' => 'Abbreviation',
      ),
      'book_chapter' => array(
        'label' => 'Abbreviation',
      ),
      'classical' => array(),
      'film' => array(),
    ),
  );

  // Type of work.
  $items['biblio_type_of_work'] = array(
    'description' => 'Type of work',
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_type_of_work',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'Type of work',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
      'bundles_info' => array(
        'audiovisual' => array(
          'label' => 'Type',
        ),
        'book' => array(),
      ),
      'chart' => array(
        'label' => 'Type of Image',
      ),
      'classical' => array(
        'label' => 'Type',
      ),
      'conference_proceedings' => array(),
      'film' => array(
        'label' => 'Medium',
      ),
    ),
  );

  // Biblio URL.
  $items['biblio_url'] = array(
    'description' => 'URL',
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_url',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'URL',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
    // @todo: Applies to all?
    'bundles_info' => array(
      'artwork' => array(),
      'audiovisual' => array(),
      'book' => array(),
      'book_chapter' => array(),
      'bill' => array(),
      'broadcast' => array(),
      'case' => array(),
      'chart' => array(),
      'classical' => array(),
      'conference_paper' => array(),
      'conference_proceedings' => array(),
      'database' => array(),
      'film' => array(),
      'government_report' => array(),
    )
  );

  // Biblio volume.
  $items['biblio_volume'] = array(
    'description' => 'URL',
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_volume',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'Volume',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
    'bundles_info' => array(
      'book' => array(),
      'book_chapter' => array(),
      'bill' => array(
        'label' => 'Code Volume',
      ),
      'case' => array(
        'label' => 'Reporter Volume',
      ),
      'chart' => array(
        'label' => 'Image Size',
      ),
      'classical' => array(),
      'conference_proceedings' => array(),
      'government_report' => array(),
    ),
  );

  // Biblio volume.
  $items['biblio_doi'] = array(
    'description' => 'DOI',
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_doi',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'volume',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
    // @todo: Applies to all?
    'bundles_info' => array(
      'artwork' => array(),
      'audiovisual' => array(),
      'book' => array(),
      'book_chapter' => array(),
      'bill' => array(),
      'broadcast' => array(),
      'case' => array(),
      'chart' => array(),
      'classical' => array(),
      'conference_paper' => array(),
      'conference_proceedings' => array(),
      'database' => array(),
      'film' => array(),
      'government_report' => array(),
    )
  );

  // Biblio place published.
  $items['biblio_place_published'] = array(
    'description' => 'City',
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_place_published',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'City',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
    'bundles_info' => array(
      'audiovisual' => array(),
      'artwork' => array(),
      'book' => array(),
      'book_chapter' => array(),
      'case' => array(
        'label' => 'Place Published',
      ),
      'chart' => array(),
      'classical' => array(),
      'conference_paper' => array(),
      'conference_proceedings' => array(),
      'film' => array(
        'label' => 'Country',
      ),
    ),
  );

  // Biblio publisher.
  $items['biblio_publisher'] = array(
    'description' => 'Publisher',
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_publisher',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'Publisher',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
    'bundles_info' => array(
      'artwork' => array(),
      'audiovisual' => array(),
      'book' => array(),
      'book_chapter' => array(),
      'case' => array(
        'label' => 'Court',
      ),
      'chart' => array(),
      'classical' => array(),
      'conference_paper' => array(),
      'conference_proceedings' => array(),
      'database' => array(),
      'film' => array(),
      'government_report' => array(),
    ),
  );

  // Biblio edition.
  $items['biblio_edition'] = array(
    'description' => 'Edition',
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_edition',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'Edition',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
    'bundles_info' => array(
      'audiovisual' => array(),
      'book' => array(),
      'book_chapter' => array(),
      'bill' =>array(
        'label' => 'Session',
      ),
      'chart' => array(
        'label' => 'Version',
      ),
      'classical' => array(),
      'conference_proceedings' => array(),
      'government_report' => array(),
    ),
  );

  // Biblio secondary title.
  $items['biblio_secondary_title'] = array(
    'description' => 'Secondary title',
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_secondary_title',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'Secondary title',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
    'bundles_info' => array(
      'audiovisual' => array(
        'label' => 'Series Title',
      ),
      'book' => array(
        'label' => 'Series Title',
      ),
      'book_chapter' => array(
        'label' => 'Book Title',
      ),
      'bill' => array(
        'label' => 'Code',
      ),
      'case' => array(
        'label' => 'Reporter',
      ),
      'chart' => array(
        'label' => 'Image Source Program',
      ),
      'classical' => array(
        'label' => 'Series Title',
      ),
      'conference_paper' => array(
        'label' => 'Conference Name',
      ),
      'conference_proceedings' => array(
        'label' => 'Conference Name',
      ),
      'database' => array(
        'required' => TRUE,
      ),
      'film' => array(
        'label' => 'Series Title',
      ),
    ),
  );

  // Biblio tertiary title.
  $items['biblio_tertiary_title'] = array(
    'description' => 'Tertiary title',
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_tertiary_title',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'Tertiary title',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
    'bundles_info' => array(
      'book_chapter' => array(
        'label' => 'Series Title',
      ),
      'bill' => array(
        'label' => 'Legislative Body',
      ),
      'chart' => array(
        'label' => 'Name of File',
      ),
      'conference_proceedings' => array(
        'label' => 'Series Title',
      ),
      'government_report' => array(
        'label' => 'Series Title',
      ),
    ),
  );

  // Refereed designation.
  $items['biblio_refereed_designation'] = array(
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_refereed_designation',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'Refereed Designation',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
    // @todo: Applies to all?
    'bundles_info' => array(
      'artwork' => array(),
      'audiovisual' => array(),
      'book' => array(),
      'book_chapter' => array(),
      'bill' => array(),
      'chart' => array(),
      'classical' => array(),
      'conference_paper' => array(),
      'conference_proceedings' => array(),
      'database' => array(),
      'film' => array(),
      'government_report' => array(),
      ),
  );

  // Original publication.
  $items['biblio_original_publication'] = array(
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_original_publication',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'Original Publication',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
    'bundles_info' => array(
      'audiovisual' => array(
        'label' => 'Contents',
      ),
      'book' => array(),
      'book_chapter' => array(),
      'bill' => array(
        'label' => 'History',
      ),
      'case' => array(
        'label' => 'History',
      ),
      'classical' => array(),
    ),
  );

  // Publication status.
  $items['biblio_status'] = array(
    'field' => array(
      'field_name' => 'biblio_status',
      'type' => 'list_text',
      'cardinality' => 1,
      'settings' => array(
        'allowed_values' => array(
          'in_press' => 'In press',
          'submitted' => 'Submitted',
          'published' => 'Published',
        ),
      ),
    ),
    'instance' => array(
      'label' => t('Publication status'),
      'description' => t('Determine the publication status (In press, Submitted, Published, etc\').'),
      'display_label' => 1,
      'widget' => array(
        'module' => 'options',
        'type' => 'options_select',
        'weight' => 0,
        'settings' => array(
          'display_label' => TRUE,
        ),
      ),
    ),
  );

  // Language field.
  $items['biblio_language'] = array(
    'field' => array(
      'cardinality' => '1',
      'field_name' => 'biblio_language',
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'instance' => array(
      'label' => 'Language',
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '-3',
      ),
    ),
  );

  return $items;
}

/**
 * Create new Biblio bundles.
 *
 * @todo: Make the bundles configurable?
 */
function biblio_add_publication_types() {
  foreach (biblio_get_types_info() as $values) {
    $name = $values['name'];

    $row = new stdClass();
    $row->type = strtolower(str_replace(' ', '_', $name));
    $row->name = $name;
    $row->description = $values['description'];
    biblio_type_save($row);
  }
}


function biblio_get_types_info($type = NULL) {
  $return = &drupal_static(__FUNCTION__, array());

  if (empty($return)) {
    foreach (module_implements('biblio_types_info') as $module) {
      if ($types = module_invoke($module, 'biblio_types_info')) {
        foreach ($types as $key => $value) {

          // Add default values.
          $value += array(
            'description' => '',
            'style_info' => array(),
          );

          // Add the module information.
          $return[$key] = array_merge($value, array('module' => $module));
        }
      }
    }

    // Allow other modules to alter the field info.
    drupal_alter('biblio_types_info', $return);
  }

  if (!empty($type)) {
    return !empty($return[$type]) ?  $return[$type] : FALSE;
  }

  return $return;
}

/**
 * Implements biblio_types_info().
 */
function biblio_biblio_types_info() {
  $types['audiovisual'] = array('name' => 'Audiovisual');
  $types['artwork'] = array('name' => 'Artwork');
  $types['bill'] = array('name' => 'Bill');
  $types['book'] = array('name' => 'Book');
  $types['book_chapter'] = array('name' => 'Book Chapter');
  $types['broadcast'] = array('name' => 'Broadcast');
  $types['case'] = array('name' => 'Case');
  $types['chart'] = array('name' => 'Chart');
  $types['classical'] = array('name' => 'Classical');
  $types['conference_paper'] = array('name' => 'Conference Paper');
  $types['conference_proceedings'] = array('name' => 'Conference Proceedings');
  $types['database'] = array('name' => 'Database');
  $types['film'] = array('name' => 'Film');
  $types['government_report'] = array('name' => 'Government Report');
  $types['hearing'] = array('name' => 'Hearing');
  $types['journal'] = array('name' => 'Journal');
  $types['journal_article'] = array('name' => 'Journal Article');
  $types['legal_ruling'] = array('name' => 'Legal Ruling');
  $types['map'] = array('name' => 'Map');
  $types['manuscript'] = array('name' => 'Manuscript');
  $types['magazine_article'] = array('name' => 'Magazine Article');
  $types['miscellaneous'] = array('name' => 'Miscellaneous');
  $types['miscellaneous_section'] = array('name' => 'Miscellaneous Section');
  $types['newspaper_article'] = array('name' => 'Newspaper Article');
  $types['patent'] = array('name' => 'Patent');
  $types['personal'] = array('name' => 'Personal');
  $types['presentation'] = array('name' => 'Presentation');
  $types['report'] = array('name' => 'Report');
  $types['software'] = array('name' => 'Software');
  $types['statute'] = array('name' => 'Statute');
  $types['thesis'] = array('name' => 'Thesis');
  $types['unpublished'] = array('name' => 'Unpublished');
  $types['website'] = array('name' => 'Website');
  $types['web_article'] = array('name' => 'Web Article');
  $types['web_project_page'] = array('name' => 'Web project page');
  $types['web_service'] = array('name' => 'Web service');

  return $types;
}

/**
 * Implements hook_views_pre_render().
 *
 * Replace publication year dummy value (9999) with "In Press".
 * We have added this dummy value, so it would be easier to group publications
 * by In Press and than by the real publication year.
 */
function biblio_views_pre_render(&$view) {
  if ($view->name != 'biblio_year') {
    return;
  }

  foreach ($view->result as $key => $value) {
    if (empty($value->field_biblio_year[0]['rendered']) || $value->field_biblio_year[0]['rendered']['#markup'] != '9999') {
      continue;
    }

    $view->result[$key]->field_biblio_year[0]['rendered']['#markup'] = t('In Press');
  }
}
