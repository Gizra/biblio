<?php 
/**
 * biblio.module for Drupal
 * Author:  Ron Jerome (ron.jerome@nrc.ca)
 * Released under the GPL license
 *
 */  
function biblio_help_page() {
  $text .= t('<H3>General:</H3>');
  $text .= t('By default, the '.l('','biblio/').' page will list all 
            of the entries in the database sorted by Year in descending order.  
            If you wish to sort by "Title" or "Type",  you may do so by
            clicking on the appropriate links at the top of the page.  To 
            reverse the sort order, simply click the link a second time.');
  $text .= t('<H3>Filtering Search Results:</H3>');
  $text .= t('<P>If you wish to filter the results, click on the "Filter" tab at the
              top of the page.  To add a filter, click the radio button to the left 
              of the filter type you wish to apply, then select the filter criteria
              from the drop down list on the right, then click the filter button.</P>');
  $text .= t('<P> It is possible to create complex filters by returning to the 
              <i>"Filter"</i> tab and adding additional filters.  Simply follow the steps
              outlined above and press the "Refine" button.</P>');
  $text .= t('<P>All filters can be removed by clicking the <I>Clear All Filters</I>
              link at the top of the result page, or on the <i>"Filter"</i> tab
              they can be removed one at a time using the <i>"Undo"</i> button, or 
              you can remove them all using the <i>"Clear All"</i> button</P>');
  $text .= t('<P>You may also construct URLs which filter.  For example, /biblio/year/2005
              will show all of the entries for 2005.  /biblio/year/2005/author/smith will show
              all of entries from 2005 for smith.</P>');
  $text .= t('<H3>Exporting Search Results:</H3>');
  $text .= t('<P>Assuming this option has been enabled by the administrator, you
              can export search results directly into EndNote.  The link at the 
              top of the result page will export all of the search results, and the
              links on individual entries will export the information related
              to that single entry. </P>');
  $text .= t('<P>The information is exported in EndNote "Tagged" format similar to this...
              <pre>
              %0  Book
              %A  John Smith 
              %D  1959
              %T  The Works of John Smith
              ...
              </pre></P>');
  $text .= t('<P>Clicking on one of the export links should cause your browser to
              ask you whether you want to Open, or Save To Disk, the file endnote.enw.
              If you choose to open it, Endnote should start and ask you which library
              you would like store the results in.  Alternatively, you can save the 
              file to disk and manually import it into EndNote.</P>');

  print theme('page', $text);
} 

/**
* Implementation of hook_help().
* 
* Throughout Drupal, hook_help() is used to display help text at the top of
* pages. Some other parts of Drupal pages get explanatory text from these hooks
* as well. We use it here to provide a description of the module on the
* module administration page.
*/

function biblio_help($section) {
  switch ($section) {
    case 'admin/modules#description': 
      // This description is shown in the listing at admin/modules.
      return t('Manages a list of scholarly papers on your site');
    case 'node/add#biblio': 
      // This description shows up when users click "create content."
      return t('This allows you to add a bibliographic entry to the database');
  } 
} 

function biblio_node_info() {
  return array('biblio' => array('name' => t('biblio'), 'base' => 'biblio'));
}


/**
* Implementation of hook_access().
* 
* Node modules may implement node_access() to determine the operations
* users may perform on nodes. This example uses a very common access pattern.
*/
function biblio_access($op, $node) {
  global $user;

  if ($op == 'create') {
    // Only users with permission to do so may create this node type.
    return user_access('create biblio');
  } 
  if ($op == 'import') {
    // Only users with permission to do so may import entries from file.
    return user_access('import from file');
  } 
  // Users who create a node may edit or delete it later, assuming they have the
  // necessary permissions.
  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own biblio entries') && ($user->uid == $node->uid)) {
      return true;
    } 
  } 
} 

/**
* Implementation of hook_perm().
* 
* Since we are limiting the ability to create new nodes to certain users,
* we need to define what those permissions are here. We also define a permission
* to allow users to edit the nodes they created.
*/
function biblio_perm() {
  return array('create biblio', 'edit own biblio entries', 'import from file');
} 

/**
* Implementation of hook_link().
* 
* This is implemented so that an edit link is displayed for users who have
* the rights to edit a node.
*/
function biblio_link($type, $node = 0, $main) {
  $links = array();

  if ($type == 'node' && $node->type == 'biblio') {
    // Don't display a redundant edit link if they are node administrators.
    if (biblio_access('update', $node) && !user_access('administer nodes')) {
      $links[] = l(t('edit this entry'), "node/$node->nid/edit");
    } 
  } 

  return $links;
} 
/**
* Implementation of hook_settings().
*/
function biblio_settings() {
  $form['biblio_normalize'] = array(
    '#type' => 'checkbox',
    '#title' => t('Normalize author names when displaying biblio records'),
    '#return_value' => 1,
    '#default_value' => variable_get('biblio_normalize', 0),
    '#description' => t('Tries (doesn\'t always work) to reformat author names such that thay are all in the 
                               format lastname followed by initials, e.g. Smith, J.S. 
                               (Note: This setting does not change the entry in the database, 
                               only how it is formated after it is retrieved from the database,
                               thus you can turn it on and off at will.)'),
  );
  $form['biblio_endnote_export'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow the export of biblio search results in EndNote "Tagged" format'),
    '#return_value' => 1,
    '#default_value' => variable_get('biblio_endnote_export', 0),
    '#description' => t('This adds an export link to the search result pages.'),
  );
  $form['biblio_rowsperpage'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of results per page on biblio queries'),
    '#default_value' => variable_get('biblio_rowsperpage', 25),
    '#size' => 6,
    '#maxlength' => 6,
    '#description' => 'This sets the number of results that will be displayed per page. ',
  );
  $form['sort'] = array(
  '#type' => 'fieldset',
  '#title' => t('Initial Defaults'),
  '#description' => t('You can set the default sorting and ordering for the /biblio page here.'),
  );
  $form['sort']['biblio_sort'] = array(
  '#type' => 'radios',
  '#title' => t('Sort by'),
  '#default_value' => variable_get('biblio_sort', 'year'),
  '#options' => array('year'=>t('Year'), 'type'=>t('Type'),'title'=>t('Title')),
  );
  $form['sort']['biblio_order'] = array(
  '#type' => 'radios',
  '#title' => t('Order'),
  '#default_value' => variable_get('biblio_order', 'DESC'),
  '#options' => array('DESC'=>t('Descending'), 'ASC'=>t('Ascending')),
  );
  return $form;
} 

/**
* Implementation of hook_menu().
* 
* Here we define some built in links for the biblio module, links exposed are:
*   /node/add/biblio      => to add a single entry
*   /biblio               => lists all entries in the biblio database
*   /biblio/list          => default local task for /biblio
*   /biblio/filter        => local task which allows users to add filters to their query
*   /biblio/filter/clear  => used internally to remove all filters
*   /biblio/help          => displays a help page
*   /biblio/export/endnote => used to export information in Endnote Tagged format
*   /biblio/import/form   => presents a form to allow the user to upload a file to import
*    
*   
*/
function biblio_menu($may_cache) {
  //drupal_set_html_head('<style type="text/css">@import url(' . drupal_get_path('module', 'biblio') . '/biblio.css);</style>');
  //echo "menu: $may_cache";
  drupal_set_html_head(theme('stylesheet_import', base_path() . drupal_get_path('module', 'biblio') . '/biblio.css'));
  $items = array();

  if ($may_cache) {
    $items[] = array('path' => 'node/add/biblio', 'title' => t('bibliography'),
      'access' => user_access('create biblio'));
    $items[] = array('path' => 'biblio', 'title' => t(''),
      'callback' => 'biblio_db_search',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK);
    // The next two "LOCAL TASKS" are for the admin/settings/biblio page  
    $items[] = array('path' => 'admin/settings/biblio/basic', 'title' => t('Basic'),
      'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -10);
    $items[] = array('path' => 'admin/settings/biblio/import', 'title' => t('Import'),
      'callback' => 'biblio_form_import',
      'type' => MENU_LOCAL_TASK, 'weight' => -9);  
    $items[] = array('path' => 'admin/settings/biblio/types', 'title' => t('Types'),
      'callback' => 'biblio_form_types',
      'type' => MENU_LOCAL_TASK, 'weight' => -9);  
    $items[] = array('path' => 'admin/settings/biblio/types/edit', 'title' => t(''),
      'callback' => 'biblio_form_types_edit',
      'type' => MENU_CALLBACK );  
    $items[] = array('path' => 'admin/settings/biblio/types/add', 'title' => t(''),
      'callback' => 'biblio_form_types_add',
      'type' => MENU_CALLBACK );  
    $items[] = array('path' => 'admin/settings/biblio/types/delete', 'title' => t(''),
      'callback' => 'biblio_form_types_delete',
      'type' => MENU_CALLBACK );  
    $items[] = array('path' => 'admin/settings/biblio/types/new', 'title' => t('New'),
      'callback' => 'biblio_form_types',
      'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -9);  
//    $result = db_query('SELECT * FROM {biblio_types} as t where t.tid > 0  ORDER BY t.tid ASC');
//    while ($type = db_fetch_object($result)) {
//      $items[] = array('path' => 'admin/settings/biblio/types/'.$type->tid, 'title' => $type->name,
     // 'callback' => 'biblio_form_types',
//      'type' => MENU_LOCAL_TASK, 'weight' => $type->tid);  
//    }
    $items[] = array('path' => 'biblio/list', 'title' => t('List'),
      'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -10);
    $items[] = array('path' => 'biblio/filter', 'title' => t('Filter'),
      'callback' => 'biblio_filter_form',
      'type' => MENU_LOCAL_TASK, 'weight' => -9);
    $items[] = array('path' => 'biblio/filter/clear', 'title' => t(''),
      'callback' => 'biblio_filter_clear',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'biblio/help', 'title' => t('Help'),
      'callback' => 'biblio_help_page',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'biblio/export/endnote', 'title' => t(''),
      'callback' => '_endnote_tagged_export',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'biblio/export/endnote7XML', 'title' => t(''),
      'callback' => '_endnote7_XML_export',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'biblio/import/form', 'title' => t(''),
      'callback' => 'biblio_form_import',
      'access' => user_access('import from file'),
      'type' => MENU_CALLBACK);
  } 

  return $items;
} 
function biblio_form_types_add(){
    $form['name'] = array('#type'=>'textfield','#title'=>'Type Name:','#size'=>20,'#maxlength'=>64);
    $form['description'] = array('#type'=>'textfield','#title'=>'Description:','#size'=>20,'#maxlength'=>255);
    $form[] = array('#type' => 'submit', '#value' => t('Create New Type'));
    return drupal_get_form('biblio_form_types_add',$form);
}
function biblio_form_types_add_submit($form_id, $edit){
   $query = "INSERT INTO {biblio_types} (`name`,`description`) VALUES ('%s', '%s')";
    db_query($query,$edit['name'],$edit['description']);
    drupal_goto('admin/settings/biblio/types');
}
function biblio_form_types_delete(){
 $args = func_get_args();
 if ($args[0] > 0 && is_numeric($args[0]) ) {
    $result = db_query('SELECT t.* FROM {biblio_types} as t WHERE t.tid = %d ', $args[0]);
    $row = db_fetch_array($result);
    $result = db_query('SELECT b.* FROM {biblio} as b WHERE b.biblio_type = %d',$row['tid']);
    if ($num_rows = db_num_rows($result)){
      $existing_msg = 'There are '.$num_rows.' publications of this type, they will be given a temporary id of -'.$row['tid'];
    }
    
    $form['tid'] = array('#type' => 'value', '#value' => $row['tid']);
    $output = confirm_form('biblio_form_types_delete', $form,
           t('Are you sure you want to delete %title? '.$existing_msg, array('%title' => theme('placeholder', $row['name']))),
           $_GET['destination'] ? $_GET['destination'] : 'admin/settings/biblio/types', t('This action cannot be undone.'),
           t('Delete'), t('Cancel')  );
  
    return $output;                
  }else{
    drupal_goto('admin/settings/biblio/types');  
  }
}
function biblio_form_types_delete_submit($form_id, $edit){

  if ($form_id = "biblio_form_types_delete" ){
    db_query('DELETE FROM {biblio_types} WHERE tid = %d', $edit['tid']);
  }   
    drupal_goto('admin/settings/biblio/types');  
}
function biblio_form_types(){

  $result = db_query('SELECT t.* FROM {biblio_types as t WHERE t.tid > 0}');
  $rows[] = array('','Default',l('edit', 'admin/settings/biblio/types/edit'),'');

  while ($row = db_fetch_object($result)) {
    $rows[] = array($row->tid,$row->name,l('edit', 'admin/settings/biblio/types/edit/'. $row->tid),l('delete', 'admin/settings/biblio/types/delete/'. $row->tid));
  } 
  $header =array('Type Id','Type Name', array('data' => t('Operations'), 'colspan' => '2'));
  $output  = theme('table',$header,$rows);
  $output .= '<p>'.l('Add New Type','admin/settings/biblio/types/add').'</a>';
  return $output;
  
}
function biblio_form_types_edit(){

  // first get all of the field info
  $result = db_query('SELECT * FROM {biblio_fields} as b  ORDER BY b.weight ASC');
  while ($row = db_fetch_array($result)){
    $fields[$row['fid']] = $row;
  }
  if ($arg_list = func_get_args()){// show an existing type  
    $tid = $arg_list[0];
    $result = db_query('SELECT t.* FROM {biblio_types} as t WHERE t.tid = %d',$tid);
    $row = db_fetch_array($result);
    $form['type_name'] =array('#type'=>'value','#title'=>'tid','#value'=>$row['name']);
  
   // now get any type specific customizations 
    $result = db_query('SELECT * FROM {biblio_type_details} as b where tid=%d  ORDER BY b.weight ASC', $tid);
    while ($row = db_fetch_array($result)){
      $type_fields[$row['fid']] = $row;
    }
    if(count($type_fields)){
    // now merge the customizations with the main field array
    foreach($type_fields as $key=>$value){
      $fields[$key] = array_merge($fields[$key],$value);
    } 
    }
    $form['tid'] =array('#type'=>'value','#value'=>$tid);
  } 

  uasort($fields, "_biblio_form_sort"); // resort the fields since the weight may have changed

  $vis_comm = $tid?'visible':'common';
  $options["$vis_comm"] = '';
  $options['required'] = '';

  foreach($fields as $key=>$fld){
    if ($fld['common']) $def_values[$fld['name']][] = 'common';
    if ($fld['required']) $def_values[$fld['name']][] = 'required';
    if ($fld['visible']) $def_values[$fld['name']][] = 'visible';
    $form['name'][$fld['fid']] = array('#type'=>'markup', '#value'=>$fld['name'],'#weight'=>$fld['weight']);
    $form['types'][$fld['fid']] = array('#tree'=>1);
    $form['types'][$fld['fid']]['title'] = array('#type'=>'textfield','#default_value' => $fld['title'],'#size'=>20,'#weight'=>$fld['weight']);
    $form['types'][$fld['fid']]['weight'] = array('#type'=>'textfield','#default_value' => $fld['weight'],'#size'=>2,'#weight'=>$fld['weight']);
    $form['types'][$fld['fid']]['hint'] = array('#type'=>'textfield','#default_value' => $fld['hint'],'#size'=>10,'#weight'=>$fld['weight']);
    if($tid) {$form['types'][$fld['fid']]['common'] = array('#type'=>'markup','#value' => $fld['common']?'X':' ','#weight'=>$fld['weight']);}
    $form['types'][$fld['fid']]['checkboxes'] = array('#type'=>'checkboxes','#options'=>$options,'#default_value' =>$def_values[$fld['name']],'#weight'=>$fld['weight']);      
  }
 // }
  
   $form['submit'] = array('#type' => 'submit', '#value' => t('Save Type Info'));
  
  return drupal_get_form('biblio_type_form_edit',$form);
}
function theme_biblio_type_form_edit($form){
//print_r($form);
  drupal_set_title($form['type_name']?$form['type_name']['#value']:"Default");
  $rows = array();
  foreach(element_children($form['name']) as $fld){
//  if ($form['types'][$fld]['checkboxes']['#value']['common'] || $form['types'][$fld]['checkboxes']['#value']['visible']){
    $row = array();
        $row[] = array('data' => form_render($form['name'][$fld]));
        $row[] = array('data' => form_render($form['types'][$fld]['title']),'align' => 'center');
        $row[] = array('data' => form_render($form['types'][$fld]['hint']),'align' => 'center');
       if ($form['tid']){
               $row[] = array('data' => form_render($form['types'][$fld]['common']),'align' => 'center');
      }
       foreach (element_children($form['types'][$fld]['checkboxes']) as $oid) {
          if (is_array($form['types'][$fld]['checkboxes'])) {
            $row[] = array('data' => form_render($form['types'][$fld]['checkboxes'][$oid]), 'align' => 'center', 'title' => t($oid));
          }
        }
        $row[] = array('data' => form_render($form['types'][$fld]['weight']),'align' => 'center');
      $rows[] = $row;
//  }
  }
  if ($form['tid']){
    $header =array('Field Name','Default Title','Hint','Common','Custom','Required','Weight');
  }else{
    $header =array('Field Name','Default Title','Hint','Common','Required','Weight');

  }
  
  $output .= '<p>';
  $output .= theme('table',$header,$rows);
  $output .= form_render($form);
  return $output;
  
}
function biblio_type_form_edit_submit($form_id, $edit) {

  $tid = $edit['tid']?$edit['tid']:NULL;
  if ($tid){
    $vis_comm = $tid?'visible':'common';

    db_query('DELETE FROM {biblio_type_details} WHERE tid = %d', $tid);
  
    $type_query = "INSERT INTO {biblio_type_details} (tid, fid, title, weight, visible , required , hint)
                   VALUES (%d,%d,'%s',%d,%d,%d,'%s') ";
  }else{
    $vis_comm = $tid?'visible':'common';  
    $field_query = "UPDATE {biblio_fields} SET title = '%s', weight = %d, 
                    common = %d, required = %d, hint = '%s' WHERE fid = %d";  
  }


  foreach ($edit as $key=>$v){
    $common = ($v['checkboxes']['common'])?TRUE:FALSE;
    $required = ($v['checkboxes']['required'])?TRUE:FALSE;
    $visible = ($v['checkboxes']['visible'])?TRUE:FALSE;
    if(is_numeric($key) ){
      if($tid && $visible){
        db_query($type_query, $tid,$key,$v['title'],$v['weight'],$visible,$required,$v['hint']);      
      }elseif(!$tid){
        db_query($field_query, $v['title'],$v['weight'],$common,$required,$v['hint'],$key);
      }
      //print_r(array_merge($value,array($key)));
    }
 }    
  drupal_set_message(t('The changes have been saved.'));

  // Clear the cached pages and menus:
  menu_rebuild();
    drupal_goto('admin/settings/biblio/types');  

}
function _biblio_form_sort($a, $b) {
  $a_weight = (is_array($a) && isset($a['weight'])) ? $a['weight'] : 0;
  $b_weight = (is_array($b) && isset($b['weight'])) ? $b['weight'] : 0;
  if ($a_weight == $b_weight) {
    return 0;
  }
  return ($a_weight < $b_weight) ? -1 : 1;
}

function biblio_filter_clear() {
  $_SESSION['biblio_filter'] = array();
  drupal_goto('/biblio');
} 

function biblio_filters(){
  $result = db_query('SELECT b.biblio_year, b.biblio_authors, t.name , t.tid FROM {biblio} as b  left join {biblio_types} as t on b.biblio_type = t.tid ORDER BY b.biblio_year DESC');
  while ($option = db_fetch_object($result)) {
    $pub_years["$option->biblio_year"] = t("$option->biblio_year");
    $pub_type["$option->tid"] = t("$option->name");
    $author_array = explode(";", $option->biblio_authors);
    foreach($author_array as $auth) {
      if (strstr($auth, ",")) {
        $parts = split(",", $auth);
        $lastname = trim($parts[0]);
      } else {
        $parts = split(" ", $auth);
        $lastname = trim(end($parts));
      } 
      if ($lastname) $pub_authors["$lastname"] = $lastname;
    } 
  } 
  $pub_years = array_unique($pub_years);
  $pub_type = array_unique($pub_type);
  ksort($pub_authors);
  $filters = array('author' => array('title' => t('Author'),
      'options' => $pub_authors),
    'type' => array('title' => t('Type'),
      'options' => $pub_type),
    'year' => array('title' => t('Year'),
      'options' => $pub_years)); 
  
  return $filters;
}

function biblio_filter_form() {
  $session = &$_SESSION['biblio_filter'];
  $session = is_array($session) ? $session : array();
  $filters = biblio_filters();


   $i = 0;
  $form['filters'] = array('#type' => 'fieldset',
    '#title' => t('Show only items where'),
    '#theme' => 'biblio_filters',
  );
  foreach ($session as $filter) {
    list($type, $value) = $filter;
    if ($type == 'category') {
      // Load term name from DB rather than search and parse options array.
      $value = module_invoke('taxonomy', 'get_term', $value);
      $value = $value->name;
    }
    else {
      $value = $filters[$type]['options'][$value];
    }
    $string = ($i++ ? '<em>and</em> where <strong>%a</strong> is <strong>%b</strong>' : '<strong>%a</strong> is <strong>%b</strong>');
    $form['filters']['current'][] = array('#value' => t($string, array('%a' => $filters[$type]['title'] , '%b' => $value)));
  }

  foreach ($filters as $key => $filter) {
    $names[$key] = $filter['title'];
    $form['filters']['status'][$key] = array('#type' => 'select', '#options' => $filter['options']);
  }

  $form['filters']['filter'] = array('#type' => 'radios', '#options' => $names, '#default_value' => 'status');
  $form['filters']['buttons']['submit'] = array('#type' => 'submit', '#value' => (count($session) ? t('Refine') : t('Filter')));
  if (count($session)) {
    $form['filters']['buttons']['undo'] = array('#type' => 'submit', '#value' => t('Undo'));
    $form['filters']['buttons']['reset'] = array('#type' => 'submit', '#value' => t('Reset'));
  }

  return drupal_get_form('biblio_filter_form', $form);
}
function theme_biblio_filters(&$form) {
//echo "in theme";
  $output .= '<ul>';
  if (sizeof($form['current'])) {
    foreach (element_children($form['current']) as $key) {
      $output .= '<li>' . form_render($form['current'][$key]) . '</li>';
    }
  }

  $output .= '<li><dl class="multiselect">' . (sizeof($form['current']) ? '<dt><em>'. t('and') .'</em> '. t('where') .'</dt>' : '') . '<dd class="a">';
  foreach (element_children($form['filter']) as $key) {
    $output .= form_render($form['filter'][$key]);
  }
  $output .= '</dd>';

  $output .= '<dt>'. t('is') .'</dt>' . '<dd class="b">';

  foreach (element_children($form['status']) as $key) {
    $output .= form_render($form['status'][$key]);
  }
  $output .= '</dd>';

  $output .= '</dl>';
  $output .= '<div class="container-inline" id="node-buttons">'. form_render($form['buttons']) .'</div>';
  $output .= '</li></ul><br class="clear" />';

  return $output;
}

function biblio_filter_form_submit() {
  global $form_values;
  $op = $_POST['op'];
  $filters = biblio_filters();
  switch ($op) {
    case t('Filter'):
    case t('Refine'):
      if (isset($form_values['filter'])) {
        $filter = $form_values['filter'];

        // Flatten the options array to accommodate hierarchical/nested options.
        $flat_options = form_options_flatten($filters[$filter]['options']);
        if (isset($flat_options[$form_values[$filter]])) {
          $_SESSION['biblio_filter'][] = array($filter, $form_values[$filter]);
              drupal_goto('biblio');

        }
      }
      break;
    case t('Undo'):
      array_pop($_SESSION['biblio_filter']);
      break;
    case t('Reset'):
      $_SESSION['biblio_filter'] = array();
      break;
  }
} 
function theme_biblio_filter_form(&$form) {
  $output .= '<div id="biblio-admin-filter">';
  $output .= form_render($form['filters']);
  $output .= '</div>';
  $output .= form_render($form);
  return $output;
}

function theme_biblio_node_form($form){

}

function biblio_pre_render($form_id, &$form, $next_page = TRUE) {
  global $form_values;
    if ($form_id == 'biblio_node_form'&& isset($form_values['biblio_type']) && $form_values['biblio_type'] >0 ){

    $form['title']['#type'] = 'textfield';

    $result = db_query('SELECT * FROM {biblio_fields} as b  ORDER BY b.weight ASC');
    while ($row = db_fetch_array($result)){
      $fields[$row['fid']] = $row;
    }
 
    $result = db_query('SELECT * FROM {biblio_type_details} as b where tid= %d ORDER BY b.weight ASC',$form_values['biblio_type']);
    while ($row = db_fetch_array($result)){
      $type_fields[$row['fid']] = $row;
    }
 
    if(count($type_fields)){
    // now merge the customizations with the main field array
      foreach($type_fields as $key=>$value){
        $fields[$key] = array_merge($fields[$key],$value);
      } 
    }

    foreach ($fields as $key=>$fld){
      $type = ($fld['visible'] || $fld['common'])?$fld['type']:'value'; //determine which fields will be visible and get their type
  
      $form[$fld['name']] = array_merge($form[$fld['name']],array(
                                          '#default_value' => $node->$fld['name'],
                                          '#type' => $type,
                                          '#title' => t($fld['title']),
                                          '#required' => $fld['required'],
                                          '#size' => $fld['size'],
                                          '#maxlength' => $fld['maxsize'],
                                          '#weight' => $fld['weight']/10,
                                          '#description' => $fld['hint'])
                                        ); // end array_merge

    } //end foreach

  }//endif ($form_id == 'biblio_node_form...  
}


/**
* Implementation of hook_form().
* 
* Create the form for collecting the information
* specific to this node type. This hook requires us to return some HTML
* that will be later placed inside the form.
*/
function biblio_form(&$node, &$param) {
  global $form_values;
  $output = '';
  $param['options'] = array("enctype" => "multipart/form-data"); 

  $form['#pre_render'] = array('biblio_pre_render');

  $result = db_query('SELECT t.* FROM {biblio_types as t}');
  while ($option = db_fetch_object($result)) {
    $options["$option->tid"] = t("$option->name");
  } 

  $form['biblio_type'] = array(
    '#type' => 'select', 
    '#title' => t('Publication Type'),
    '#default_value' => $node->biblio_type,
    '#options' => $options,
    '#description' => null,
    '#weight' => -5,
    '#attributes' => array('onchange'=>'document.getElementById(\'node-form\').submit()'),
    '#multiple' => false, '#required' => true);

  $form['title']= array( // this will be set to textfield type in pre_render once the pub type is set.
    '#type' => 'value',
    '#title' => t('Title'),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#size' => 60,
    '#maxlenght' => 255,
    '#weight' => -4
  );

    // Build the field array used to make the form
    $result = db_query('SELECT * FROM {biblio_fields} as b  ORDER BY b.weight ASC');
    while ($row = db_fetch_array($result)){
      $fields[$row['fid']] = $row;
    }
    
    // Now set all the fields to "value" type so the will not be visible, and 
    // then in biblio_pre_render the correct type will be set.
    foreach ($fields as $key=>$fld){  
          $form[$fld['name']] = array(
          '#default_value' => $node->$fld['name'],
          '#type' => 'value',
          '#title' => t($fld['title']),
          '#size' => $fld['size'],
          '#required' => $fld['required'],
          '#maxlength' => $fld['maxsize'],
          '#weight' => $fld['weight']/10,
          '#description' => $fld['hint']
        );

    }

  return $form;
} 

/**
* Implementation of hook_validate().
* 
* 
* Errors should be signaled with form_set_error().
*/
function biblio_validate(&$node) {
//print_r($node);
//echo "in biblio_validate\n\n<br>";

  if ($node->biblio_type == 0) {
    form_set_error('biblio_type', t('You must select the type of publication'));
    return;
  } 
  if (!$node->biblio_authors) {
    form_set_error('biblio_authors', t('You must supply at least one author name'));
  } 
  /*  if (!strstr("$node->biblio_authors", ";")) {
    form_set_error('biblio_authors', t('You must separate the author names with semicolons'));
  } 
*/
  if (!$node->biblio_year) {
    form_set_error('biblio_year', t('You must supply the year of publication'));
  } else {
    $today = getdate();
    if ($node->biblio_year < 1900 || $node->biblio_year > $today['year'])
      form_set_error('biblio_year', t('Year of Publication must be a number between 1900 and ' . $today['year']));
  } 
  /*  if (!$node->biblio_secondary_title) {
    form_set_error('biblio_secondary_title', t('You must supply the Journal Title, Conference Name or Book Title'));
  } 
*/

} 

/**
* Implementation of hook_insert().
* 
* As a new node is being inserted into the database, we need to do our own
* database inserts.
*/
function biblio_insert($node) {
  // Prepare the query:
  $fields = biblio_get_db_fields();
  foreach ($node as $key => $value) {
    if (in_array((string) $key, $fields)) {
      $k[] = db_escape_string($key);
      $v[] = utf8_encode($value);
      $s[] = "'%s'";
    } 
  } 
  // Insert the node into the database:
  db_query("INSERT INTO {biblio} (" . implode(", ", $k) . ") VALUES(" . implode(", ", $s) . ")", $v);
} 

/**
* Implementation of hook_update().
* 
* As an existing node is being updated in the database, we need to do our own
* database updates.
*/
function biblio_update($node) {
  $fields = biblio_get_db_fields();
  foreach ($node as $key => $value) {
    if (in_array($key, $fields)) {
      $q[] = db_escape_string($key) . " = '%s'";
      $v[] = $value;
    } 
  } 
  // Update the node in the database:
  db_query("UPDATE {biblio} SET " . implode(', ', $q) . " WHERE nid = '$node->nid'", $v);
} 

/**
* Implementation of hook_delete().
* 
* When a node is deleted, we need to clean up related tables.
*/
function biblio_delete($node) {
  db_query('DELETE FROM {biblio} WHERE nid = %d', $node->nid);
} 

/**
* Implementation of hook_load().
* 
* This hook is called
* every time a node is loaded, and allows us to do some loading of our own.
* 
*/
function biblio_load($node) {
  $additions = db_fetch_object(db_query('SELECT * FROM {biblio} WHERE nid = %d', $node->nid));
  return $additions;
} 

/**
* Implementation of hook_view().
* 
* This is a typical implementation that simply runs the node text through
* the output filters.
*/
function biblio_view(&$node, $teaser = false, $page = false) {
  $biblio_info = theme('biblio_long', $node);
  $node->body .= $biblio_info;
  $node->teaser .= $biblio_info; 
  // $node = node_prepare($node, $teaser);
} 

/**
* Implementation of hook_block().
* 
* Generates a block containing the latest poll.
*/
function biblio_block($op = 'list', $delta = 0) {
  if (user_access('access content')) {
    if ($op == 'list') {
      $blocks[0]['info'] = t('Most recent publications');
      return $blocks;
    } else if ($op == 'view') {
      // Retrieve the latest pubs
      // $sql = "SELECT n.title FROM (node) n WHERE n.type = 'biblio' ORDER BY n.created DESC"
      $result = db_query_range(db_rewrite_sql("SELECT n.title, n.nid FROM {node} AS n WHERE n.type = 'biblio' ORDER BY n.created DESC"), 0, 4);
      if (db_num_rows($result)) {
        $block['subject'] = t('New Publications');
        $block['content'] .= '<div class="item-list"><ul>';
        while ($pub = db_fetch_object($result)) {
          $block['content'] .= '<li >' . l("$pub->title", "node/$pub->nid") . '</li>';
        } 
        $block['content'] .= '</ul></div>';
      } 
      return $block;
    } 
  } 
} 

function theme_biblio_long($pub) {
  if (variable_get('biblio_normalize', 0)) {
    $authors = check_plain(_parse_authors($pub->biblio_authors));
  } else {
    $authors = check_plain($pub->biblio_authors);
  } 

  $output .= '<div class="biblio_authors"><H3>'.t("Authors").':</H3> ' . _author_links($authors) . "</div>\n";
  $output .= '<div class="biblio_source"><H3>'.t("Source").': </H3> ';
  $source = null;
  if ($pub->biblio_secondary_title) $source .= check_plain($pub->biblio_secondary_title);
  if ($pub->biblio_publisher) {
    $source .= $source?", ":"";
    $source .= check_plain($pub->biblio_publisher);
  } 
  if ($pub->biblio_volume) {
    $source .= $source?", ":"";
    $source .= t('Volume ') . check_plain($pub->biblio_volume);
  } 
  if ($pub->biblio_issue) {
    $source .= $source?", ":"";
    $source .= t('Issue ') . check_plain($pub->biblio_issue);
  } 
  if ($pub->biblio_number) {
    $source .= $source?", ":"";
    $source .= t('Number ') . check_plain($pub->biblio_number);
  } 

  if ($pub->biblio_place_published) {
    $source .= $source?", ":"";
    $source .= check_plain($pub->biblio_place_published);
  } 
  if ($pub->biblio_pages) {
    $source .= $source?", ":"";
    $source .= 'p.' . check_plain($pub->biblio_pages);
  } 
  if ($pub->biblio_year) {
    $source .= ' (' . check_plain($pub->biblio_year) . ')';
  } 
  $output .= "$source</div>\n";

  if ($pub->biblio_isbn) $output .= '<h3>'.t("ISBN").':</h3> ' . check_plain($pub->biblio_isbn) . "\n";
  if ($pub->biblio_call_number) $output .= '<h3>'.t("Call Number").':</h3> ' . check_plain($pub->biblio_call_number) . "\n";
  if ($pub->biblio_accession_number) $output .= '<h3>'.t("Accession Number").':</h3> ' . check_plain($pub->biblio_accession_number) . "\n";
  if ($pub->biblio_other_number) $output .= '<h3>'.t("Other Number").':</h3> ' . check_plain($pub->biblio_other_number) . "\n";
  if ($pub->biblio_url) $output .= '<h3>'.t("URL").':</h3>'.l("$pub->biblio_url",$pub->biblio_url) . "\n";
  if ($pub->biblio_keywords) $output .= '<h3>'.t("Keywords").':</h3> ' . check_plain($pub->biblio_keywords) . "\n";
  if ($pub->biblio_abst_e) $output .= '<H3>'.t("Abstract").':</h3> ' . check_markup($pub->biblio_abst_e,FILTER_HTML_ESCAPE,FALSE) . "\n";
  if ($pub->biblio_abst_f) $output .= '<p>' . check_markup($pub->biblio_abst_f,FILTER_HTML_ESCAPE,FALSE) . "\n";
  if ($pub->biblio_notes) $output .= '<h3>'.t("Notes").': </h3>' . check_markup($pub->biblio_notes,FILTER_HTML_ESCAPE,FALSE) . "\n";
  if (variable_get('biblio_endnote_export', 0)) {
    $output .= '<br><br><B>Export: '.l(t("Tagged"),"biblio/export/endnote/$pub->nid").' </B>';
    $output .= l("XML","biblio/export/endnote7XML/$pub->nid");
  } 

  return $output;
} 

function theme_biblio_short($pub) {
  if (variable_get('biblio_normalize', 0)) {
    $authors = check_plain(_parse_authors($pub->biblio_authors));
  } else {
    $authors = check_plain($pub->biblio_authors);
  } 
  $output .= '<span class="biblio-title">' . l($pub->title, "node/$pub->nid") . "</span> \n";
  $output .= '<span class="biblio-authors">' . _author_links($authors) . "</span> \n";
  if ($pub->biblio_secondary_title) {
    $output .= ', ' . check_plain($pub->biblio_secondary_title);
  } 
  if ($pub->biblio_date) $output .= ', ' . check_plain($pub->biblio_date);
  if ($pub->biblio_volume) $output .= ', Volume ' . check_plain($pub->biblio_volume);
  if ($pub->biblio_issue) $output .= ', Issue ' . check_plain($pub->biblio_issue);
  if ($pub->biblio_number) $output .= ', Number ' . check_plain($pub->biblio_number);

  if ($pub->biblio_place_published) $output .= ', ' . check_plain($pub->biblio_place_published);
  if ($pub->biblio_pages) $output .= ', p.' . check_plain($pub->biblio_pages);
  if ($pub->biblio_year) $output .= ', (' . check_plain($pub->biblio_year) . ")\n";
  if ($pub->biblio_abst_e) $output .= l("Abstract", "node/$pub->nid") . "\n";
  if (variable_get('biblio_endnote_export', 0)) {
    $output .= '<em>Export: '.l("Tagged","biblio/export/endnote/$pub->nid") . '&nbsp';
    $output .= l("XML","biblio/export/endnote7XML/$pub->nid") . '</em>';
  } 
  return $output;
} 

function biblio_show_results($result, $attrib = array("sort" => 'year', 'order' => 'DESC'), $args = null) {
  global $pager_total_items;

  $pub_types = db_query('SELECT t.* FROM {biblio_types as t} WHERE t.tid>0');
  while ($option = db_fetch_object($pub_types)) {
    $pub_type["$option->tid"] = t("$option->name");
  } 
  // Add some links to the top of the page to change the sorting/ordering...
  $order = ($attrib['order'] == "desc" || $attrib['order'] == "DESC")?"asc":"desc";
  if (variable_get('biblio_endnote_export', 0)) {
    $content .= '<div class="biblio_export">Export (' . $pager_total_items[0] . ') results in Endnote '.l("Tagged","biblio/export/endnote"). ' or '.l("XML","biblio/export/endnote7XML").'</div>';
  } 
  $content .= '<div class="biblio_sort">Sort by: 
                 <a href="' . $_GET["q"] . '?sort=year&order=' . $order . '" title="Click a second time to reverse the sort order">' . 'Year</a> 
                 <a href="' . $_GET["q"] . '?sort=title&order=' . $order . '" title="Click a second time to reverse the sort order">' . 'Title </a>
                 <a href="' . $_GET["q"] . '?sort=type&order=' . $order . '" title="Click a second time to reverse the sort order">' . "Type </a>
                </div> ";
  $session = &$_SESSION['biblio_filter'];
  if (count($args)) {
    $content .= '<b>Filters: </b>';
    while ($args) {
      $type = $args[0];
      array_shift($args);
      $value = db_escape_string($args[0]);
      if ($type == 'type') $value = $pub_type["$value"];
      array_shift($args);
      $params = array('%a' => '<strong>' . $type . '</strong>', '%b' => '<strong>' . $value . '</strong>');
      $content .= ($i++ ? t('<em> and</em> <strong>%a</strong> is <strong>%b</strong>', $params) : t('<strong>%a</strong> is <strong>%b</strong>', $params)) . '</li>';
    } 
    $content .= l('Clear All Filters','biblio/filter/clear');
  } while ($pub = db_fetch_object($result)) {
    switch ($attrib['sort']) {
      case 'title':
        if ($pub->title {
            0} != $_char) {
          $_char = $pub->title {
            0} ;
          $content .= '<div class="biblio-year">' . $_char . "</div>\n";
        } 
        break;
      case 'type':
        if ($pub->biblio_type != $_type) {
          $_type = $pub->biblio_type;
          $name = db_result(db_query("SELECT name FROM {biblio_types as t} where t.tid=%d", $pub->biblio_type)) ;
          $content .= '<div class="biblio-year">' . $name . "</div>\n";
        } 
        break;
      case 'year':
      default:
        if ($pub->biblio_year != $_year) {
          $_year = $pub->biblio_year;
          $content .= '<div class="biblio-year">' . $_year . "</div>\n";
        } 
    } //end switch
    $content .= '<div class="biblio-entry">' . "\n";
    $content .= theme('biblio_short', $pub);
    $content .= "</div>\n";
  } //end while
  $content .= theme('pager', 0, variable_get('biblio_rowsperpage', 25), 0, $attrib);
  if (!db_num_rows($result)) {
    $content .= t("<H3>No items found</H3>");
    if (strstr($content, "Filters:")) {
      $content .= l(t('Modify'),'biblio/filter');
      $content .= ' or '.l(t('remove'),'biblio/filter/clear').' your filters and try again.';
    }
  } 
  print theme('page', $content);
} 

function biblio_db_search() {
  $pager_attrib = array("sort" => variable_get('biblio_sort', 'year'), 'order' => variable_get('biblio_order', 'DESC'));
  $limits = null;

  $params = array('sort', 'order');
  foreach ($params as $param) {
    if (isset($_GET[$param])) {
      $pager_attrib["$param"] = db_escape_string($_GET[$param]);
    } 
  } 

  switch ($pager_attrib['sort']) {
    case 'type':
      $sortby = "ORDER BY b.biblio_type %s, b.biblio_year DESC, SUBSTRING(n.title,1,1) ASC ";
      break;
    case 'title':
      $sortby = "ORDER BY SUBSTRING(n.title,1,1) %s, b.biblio_year DESC ";
      break;
    case 'year':
    default:
      $sortby = "ORDER BY b.biblio_year %s, SUBSTRING(n.title,1,1) ASC, b.biblio_type ASC ";
  } //end switch
  if (!isset($_SESSION['biblio_filter']) || !is_array($_SESSION['biblio_filter'])) {
    $_SESSION['biblio_filter'] = array();
  } 

  $session = &$_SESSION['biblio_filter'];
  
  $numargs = func_num_args();
  $arg_list = func_get_args();
  foreach ($session as $filter) {
    $arg_list = array_merge($arg_list, $filter);
  } 
  if (count($arg_list) >= 2) {
    $args = array();
    while ($arg_list) {
      $type = $arg_list[0];
      array_shift($arg_list);
      switch ($type) {
        case 'author':
          $term = db_escape_string($arg_list[0]);
          array_shift($arg_list);
          $limit .= " AND MATCH(b.biblio_authors) AGAINST('%s'  IN BOOLEAN MODE)";
          $terms[] = $term;
          array_push($args, $type, $term);
          break;
        case 'year':
          $term = db_escape_string($arg_list[0]);
          array_shift($arg_list);
          $limit .= " AND b.biblio_year=%d ";
          $terms[] = (int)$term;
          array_push($args, $type, (int)$term);
          break;
        case 'type':
          $term = db_escape_string($arg_list[0]);
          array_shift($arg_list);
          $limit .= " AND b.biblio_type=%d ";
          $terms[] = (int)$term;
          array_push($args, $type, (int)$term);
          break;
        case 'order':
          $term = db_escape_string($arg_list[0]);
          array_shift($arg_list);
          $pager_attrib['order'] = $term;
          array_push($args, $type, $term);
          break;
        case 'sort':
          $term = db_escape_string($arg_list[0]);
          array_shift($arg_list);
          $pager_attrib['sort'] = $term;
          array_push($args, $type, $term);
          switch ($term) {
            case 'type':
              $sortby = "ORDER BY b.biblio_type %s, b.biblio_year DESC, SUBSTRING(n.title,1,1) ASC ";
              break;
            case 'title':
              $sortby = "ORDER BY SUBSTRING(n.title,1,1) %s, b.biblio_year DESC ";
              break;
            case 'year':
            default:
              $sortby = "ORDER BY b.biblio_year %s, SUBSTRING(n.title,1,1) ASC, b.biblio_type ASC ";
          } //end switch
          break;
      } 
    } 
  } 
  $query = "SELECT * FROM {node} n left join {biblio} b  on n.nid=b.nid  WHERE n.type='biblio' $limit $sortby ";

  $_SESSION['last_biblio_query'] = $query;
  $terms[] = $pager_attrib['order'];

  $result = pager_query(db_rewrite_sql($query), variable_get('biblio_rowsperpage', 25),0,null,$terms);

  biblio_show_results($result, $pager_attrib, $args);
} 

function _endnote7_XML_export($nid = null) {
if (extension_loaded('domxml')) {
  if ($nid === null && isset($_SESSION['last_biblio_query']) && !empty($_SESSION['last_biblio_query']) ) {
    $query = $_SESSION['last_biblio_query'];
  } elseif (!empty($nid)) {
    $query = "SELECT * FROM {node} n left join {biblio} b  on n.nid=b.nid 
                WHERE n.nid=%d ";
  }else{
    return;
  } 

  $result = db_query(db_rewrite_sql($query,$nid));

  if (db_num_rows($result)) {
    $doc = domxml_new_doc("1.0");
    $root = $doc->add_root("XML");
    $records = $root->new_child("RECORDS", "");
    while ($pub = db_fetch_object($result)) {
      $record = $records->new_child("RECORD", "");
      switch ($pub->biblio_type) {
        case 1: $reftype = 0;
          break; // journal
        case 2: // 2,3 and 4
        case 3: // are all
        case 4: $reftype = 3;
          break; // conference proceedings 
        case 5: $reftype = 10;
          break; // report
        case 6: $reftype = 7;
          break; // book section
        case 7: $reftype = 2;
          break; // thesis
        case 8: $reftype = 15;
          break; // patent
        case 9:
        default:
          $reftype = 31;
          break; // generic
      } 
      $record->new_child("REFERENCE_TYPE", "$reftype");
      $record->new_child("YEAR", trim($pub->biblio_year));
      $record->new_child("TITLE", trim($pub->title));
      $authors = $record->new_child("AUTHORS", "");
      if (variable_get('biblio_normalize', 0)) {
        $pub_authors = _parse_authors($pub->biblio_authors);
      } else {
        $pub_authors = $pub->biblio_authors;
      } 
      $author_array = explode(";", $pub_authors);
      foreach($author_array as $auth) {
        $authors->new_child("AUTHOR", trim($auth));
      } 
      if ($pub->biblio_secondary_authors) {
        $sec_authors = $record->new_child("SECONDARY_AUTHORS", "");
        $author_array = explode(";", $pub->biblio_secondary_authors);
        foreach($author_array as $auth) {
          $sec_authors->new_child("SECONDARY_AUTHOR", trim($auth));
        } 
      } 
      if ($pub->biblio_tertiary_authors) {
        $ter_authors = $record->new_child("TERTIARY_AUTHORS", "");
        $author_array = explode(";", $pub->biblio_tertiary_authors);
        foreach($author_array as $auth) {
          $ter_authors->new_child("TERTIARY_AUTHOR", trim($auth));
        } 
      } 
      if ($pub->biblio_secondary_title) $record->new_child("SECONDARY_TITLE", htmlspecialchars($pub->biblio_secondary_title));
      if ($pub->biblio_place_published) $record->new_child("PLACE_PUBLISHED", "$pub->biblio_place_published");
      if ($pub->biblio_publisher) $record->new_child("PUBLISHER", htmlspecialchars($pub->biblio_publisher));
      if ($pub->biblio_volume) $record->new_child("VOLUME", "$pub->biblio_volume");
      if ($pub->biblio_issue) $record->new_child("NUMBER", "$pub->biblio_issue");
      if ($pub->biblio_pages) $record->new_child("PAGES", "$pub->biblio_pages");
      if ($pub->biblio_tertiary_title) $record->new_child("TERTIARY_TITLE", "$pub->biblio_tertiary_title");
      if ($pub->biblio_edition) $record->new_child("EDITION", "$pub->biblio_edition");
      if ($pub->biblio_date) $record->new_child("DATE", "$pub->biblio_date");
      if ($pub->biblio_isbn) $record->new_child("ISBN", "$pub->biblio_isbn");
      if ($pub->biblio_keywords) {
        $keywords = $record->new_child("KEYWORDS", "");
        $splitchar = (strstr($pub->biblio_keywords, ";"))?";":" ";
        $kw_array = explode($splitchar, $pub->biblio_keywords);
        foreach($kw_array as $kw) {
          $keywords->new_child("KEYWORD", trim($kw));
        } 
      } 
      if ($pub->biblio_abst_f) $record->new_child("ABSTRACT", trim($pub->biblio_abst_f));
      if ($pub->biblio_abst_e) $record->new_child("ABSTRACT", htmlentities(trim($pub->biblio_abst_e)));
      if ($pub->biblio_url) $record->new_child("URL", htmlentities($pub->biblio_url));
      if ($pub->biblio_notes) $record->new_child("NOTES", trim($pub->biblio_notes));

    } 
  } 
  header('Content-type: application/xml');
  header('Content-Disposition: attachment; filename="endnote7.xml"');
  echo $doc->dump_mem();
 }else{
   print theme("page","DOMXML php extension is not loaded, so the item cannot be exported in XML format");
}
} 

function _endnote_tagged_export($nid = null) {
  if ($nid === null && isset($_SESSION['last_biblio_query']) && !empty($_SESSION['last_biblio_query']) ) {
    $query = $_SESSION['last_biblio_query'];
  } elseif (!empty($nid)) {
    $query = "SELECT * FROM {node} n left join {biblio} b  on n.nid=b.nid 
                WHERE n.nid= %d ";
  }else{
    return;
  } 

  $result = db_query(db_rewrite_sql($query, $nid));

  if (db_num_rows($result)) {
    $doc = "";
    while ($pub = db_fetch_object($result)) {
      switch ($pub->biblio_type) {
        case 1: $doc .= "%0 Journal Article\r\n";
          if ($pub->biblio_secondary_title) $doc .= "%J " . trim($pub->biblio_secondary_title) . "\r\n";
          break; // journal
        case 2: $doc .= "%0 Conference Paper\r\n";
          if ($pub->biblio_secondary_title) $doc .= "%B " . trim($pub->biblio_secondary_title) . "\r\n";
          break;
        case 3: // are all
        case 4: $doc .= "%0 Conference Proceedings\r\n";
          if ($pub->biblio_secondary_title) $doc .= "%B " . trim($pub->biblio_secondary_title) . "\r\n";
          break; // conference proceedings 
        case 5: $doc .= "%0 Report\r\n";
          break; // report
        case 6: $doc .= "%0 Book Section\r\n";
          if ($pub->biblio_secondary_title) $doc .= "%B " . trim($pub->biblio_secondary_title) . "\r\n";
          break; // book section
        case 7: $doc .= "%0 Thesis\r\n";
          if ($pub->biblio_secondary_title) $doc .= "%B " . trim($pub->biblio_secondary_title) . "\r\n";
          break; // thesis
        case 8: $doc .= "%0 Patent\r\n";
          if ($pub->biblio_secondary_title) $doc .= "%B " . trim($pub->biblio_secondary_title) . "\r\n";
          break; // patent
        case 9:
        default:
          $doc .= "%0 Generic\r\n";
          break; // generic
      } 
      $doc .= "%D " . trim($pub->biblio_year) . "\r\n";
      $doc .= "%T " . trim($pub->title) . "\r\n";
      if (variable_get('biblio_normalize', 0)) {
        $pub_authors = _parse_authors($pub->biblio_authors);
      } else {
        $pub_authors = $pub->biblio_authors;
      } 
      $author_array = explode(";", $pub_authors);
      foreach($author_array as $auth) {
        $doc .= "%A " . trim($auth) . "\r\n";
      } 

      if ($pub->biblio_place_published) $doc .= "%C " . trim($pub->biblio_place_published) . "\r\n";
      if ($pub->biblio_secondary_authors) {
        $author_array = explode(";", $pub->biblio_secondary_authors);
        foreach($author_array as $auth) {
          $doc .= "%E " . trim($auth) . "\r\n";
        } 
      } 
      if ($pub->biblio_publisher) $doc .= "%I " . trim($pub->biblio_publisher) . "\r\n";
      if ($pub->biblio_keywords) $doc .= "%K " . trim($pub->biblio_keywordsn) . "\r\n";
      if ($pub->biblio_call_number) $doc .= "%L " . trim($pub->biblio_call_number) . "\r\n";
      if ($pub->biblio_accession_number) $doc .= "%M " . trim($pub->biblio_accession_number) . "\r\n";
      if ($pub->biblio_issue) $doc .= "%N " . trim($pub->biblio_issue) . "\r\n";
      if ($pub->biblio_pages) $doc .= "%P " . trim($pub->biblio_pages) . "\r\n";
      if ($pub->biblio_tertiary_title) $doc .= "%S " . trim($pub->biblio_tertiary_title) . "\r\n";
      if ($pub->biblio_url) $doc .= "%U " . trim($pub->biblio_url) . "\r\n";
      if ($pub->biblio_volume) $doc .= "%V " . trim($pub->biblio_volume) . "\r\n";
      $abst = "";
      if ($pub->biblio_abst_e) $abst .= trim($pub->biblio_abst_e);
      if ($pub->biblio_abst_f) $abst .= trim($pub->biblio_abst_f);
      if ($abst) {
        $search = array("/\r/", "/\n/");
        $replace = " ";
        $abst = preg_replace($search, $replace, $abst);
        $doc .= "%X " . $abst . "\r\n";
      } 
      if ($pub->biblio_tertiary_authors) {
        $author_array = explode(";", $pub->biblio_tertiary_authors);
        foreach($author_array as $auth) {
          $doc .= "%Y " . trim($auth) . "\r\n";
        } 
      } 
      if ($pub->biblio_notes) $doc .= "%Z " . trim($pub->biblio_notes) . "\r\n";
      if ($pub->biblio_edition) $doc .= "%7 " . trim($pub->biblio_edition) . "\r\n";
      if ($pub->biblio_date) $doc .= "%8 " . trim($pub->biblio_date) . "\r\n";
      if ($pub->biblio_type_of_work) $doc .= "%9 " . trim($pub->biblio_type_of_work) . "\r\n";
      if ($pub->biblio_isbn) $doc .= "%@ " . trim($pub->biblio_isbn) . "\r\n";

      $doc .= "\r\n";
    } 
  } 
  header('Content-type: 	application/x-endnote-refer');
  header('Content-Disposition:  filename="endnote.enw"');
  print utf8_decode($doc);
} 

function biblio_form_import() {
  if (biblio_access('import', $node)) { // && !user_access('administer nodes')) {
    $op = $_POST['op'];
    $filetype = $_POST['edit']['filetype'];
    $edit = $_POST['edit'];

    if($op == Import && $filetype == '') drupal_set_message("You must select a file type",'error');
    if ($op == Import && $filetype) {
      $import = file_check_upload('file_upload');
      if ($import) {
        $import = file_save_upload($import);
        drupal_set_message("File was successfully uploaded", 'status');
        if ($filetype == 'tagged') $content = _endnote_tagged_import($import->filepath);
        if ($filetype == 'xml') $content = _endnote7_XML_import($import->filepath);
        file_delete($import->filepath);
      } else {
        drupal_set_message("File was NOT successfully uploaded", 'error');
      } 
      return $content;
    } else {
      $form['#attributes']['enctype'] = 'multipart/form-data';
      $form["file_upload"] = array(
        '#type' => 'file',
        '#title' => t('Import Endnote file'),
        '#default_value' => $edit['file_upload'],
        '#size' => 60,
      );
      $form['filetype'] = array(
        '#type' => 'radios',
        '#title' => t('File Type'),
        '#default_value' => $edit['filetype'],
        '#options' => array('tagged' => t('EndNote Tagged') , 'xml'=>t('EndNote 7 XML')),
      );
      $form['button'] = array(
        '#type' => 'button',
        '#title' => t('Import'),
        '#value' => t('Import')
      );
      return drupal_get_form('biblio_form_import' ,$form);
      //print theme('page', form($form, 'post', null, $attributes));
    } 
  } else {
    drupal_set_message("You are not authorized to access the biblio import page", 'error');

    print theme('page', '');
  } 
} 

function _endnote_tagged_import($filename = null) {
  global $user;
  $incite = false;
  $node_array = array();
  $node = array();
  $node['type'] = "biblio";
  $node['created'] = time();
  $node['changed'] = time();
  $node['comment'] = 0;
  $node['promote'] = 0;
  $node['moderate'] = 0;
  $node['sticky'] = 0;
  $node['format'] = 0;
  $node['status'] = 1;
  $node['uid'] = $user->uid;

  if ($filename) {
    $handle = fopen ($filename, "r");
    if ($handle) {
      $list = array();
      while (!feof ($handle)) {
        $line = fgets($handle);
        $start = strpos($line, "%"); // There could be some unprintables at the beginning of the line so fine the location of the %
        if ($start !== false) {      // if this is not a blank line
          if (!$incite){
            $node_id = array_push($node_array, $node) - 1;
            $incite = true;
          }
          $tag = substr($line, $start, 2);
          $value = trim(substr($line, $start+3));

          switch ($tag) {
            case '%0':              
              switch ($value) {
                case "Journal Article": $node_array[$node_id]['biblio_type'] = 1;
                  break; // journal
                case "Conference Paper": $node_array[$node_id]['biblio_type'] = 2;
                  break;
                case "Conference Proceedings": $node_array[$node_id]['biblio_type'] = 3;
                  break; // conference proceedings 
                case "Report": $node_array[$node_id]['biblio_type'] = 5;
                  break; // report
                case "Book": 
                case "Edited Book": 
                case "Book Section": 
                  $node_array[$node_id]['biblio_type'] = 6;
                  break; // book section
                case "Thesis": $node_array[$node_id]['biblio_type'] = 7;
                  break; // thesis
                case "Patent": $node_array[$node_id]['biblio_type'] = 8;
                  break; // patent
                case "Generic":
                default:
                  $node_array[$node_id]['biblio_type'] = 9;
                  break; // generic
              } 
              break;
            case '%A': 
              // $columns .= ", author";
              if ($node_array[$node_id]['biblio_authors']) $node_array[$node_id]['biblio_authors'] .= "; ";
              $node_array[$node_id]['biblio_authors'] .= "$value";
              break;
            case '%B':
              $node_array[$node_id]['biblio_secondary_title'] = $value;
              break;
            case '%C':
              $node_array[$node_id]['biblio_place_published'] = $value;
              break;
            case '%D':
              $node_array[$node_id]['biblio_year'] = $value;
              break;
            case '%E':
              if ($node_array[$node_id]['biblio_secondary_authors']) $node_array[$node_id]['biblio_secondary_authors'] .= "; ";
              $node_array[$node_id]['biblio_secondary_authors'] = $value;
              break;
            case '%F':
              $node_array[$node_id]['label'] = $value;
              break;
            case '%I':
              $node_array[$node_id]['biblio_publisher'] = $value;
              break;
            case '%J': // Journal
              $node_array[$node_id]['biblio_secondary_title'] = $value;
              break;
            case '%K':
              $node_array[$node_id]['biblio_keywords'] = $value;
              break;
            case '%L':
              $node_array[$node_id]['biblio_call_number'] = $value;
              break;
            case '%M': // accession_number
              $node_array[$node_id]['biblio_accession_number'] = $value;
              break;
            case '%N':
              $node_array[$node_id]['biblio_issue'] = $value;
              break;
            case '%P':
              $node_array[$node_id]['biblio_pages'] = $value;
              break;
            case '%S':
              $node_array[$node_id]['biblio_tertiary_title'] = $value;
              break;
            case '%T':
              $node_array[$node_id]['title'] = $value;
              break;
            case '%U':
              $node_array[$node_id]['biblio_url'] = $value;
              break;
            case '%V':
              $node_array[$node_id]['biblio_volume'] = $value;
              break;
            case '%X':
              $node_array[$node_id]['biblio_abst_e'] = $value;
              break;
            case '%Y':
              if ($node_array[$node_id]['biblio_tertiary_authors']) $node_array[$node_id]['biblio_tertiary_authors'] .= "; ";
              $node_array[$node_id]['biblio_tertiary_authors'] = $value;
              break;
            case '%Z':
              $node_array[$node_id]['biblio_notes'] = $value;
              break;
            case '%1': // CUSTOM 1
              break;
            case '%2':// CUSTOM 2
              break;
            case '%3':// CUSTOM 3
              break;
            case '%4':// CUSTOM 4
              break;
            case '%#':// CUSTOM 5
              break;
            case '%$':// CUSTOM 6
              break;
            case '%6':
              break;
            case '%7':
              $node_array[$node_id]['biblio_edition'] = $value;
              break;
            case '%8':
              $node_array[$node_id]['biblio_date'] = $value;
              break;
            case '%9':
              $node_array[$node_id]['biblio_type_of_work'] = $value;
              break;
            case '%?':
              break;
            case '%@':
              $node_array[$node_id]['biblio_isbn'] = $value;
              break;
            case '%!':
              break;
            case '%&':
              break;
            case '%(':
              break;
            case '%)':
              break;
            case '%*':
              break;
            case '%+':
              break;
            default:
              break;
          } //end switch

        }else{
          $incite=false;
        } // end if ($start !== false) 

      } // end while 

    } // end if($handle) 

  } // end if ($filename 
  $content = null;
  if (function_exists('node_save')) {  
    foreach ($node_array as $node) {
      $node_obj = (object)$node;
      $nodeid = node_save($node_obj);
      if ($node_obj->nid) { 
         $content .= t('Successfully imported node' . l("$node_obj->nid", "node/$node_obj->nid")) . '<br>';
      }
    } 
  } 
  return $content;
} 

function _endnote7_XML_import($filename = null) {
  global $user;
if (extension_loaded('domxml')) {

  if (!$dom = domxml_open_file($filename)) {
      	drupal_set_message(t('The biblio module was unable to read the XML file supplied.'), 'error');

    drupal_goto("admin/settings/biblio/import");
  } 
  
  $elements = array();
  $node_array = array();
  $node = array();
  $node['type'] = "biblio";
  $node['created'] = time();
  $node['changed'] = time();
  $node['comment'] = 0;
  $node['promote'] = 0;
  $node['moderate'] = 0;
  $node['sticky'] = 0;
  $node['format'] = 0;
  $node['status'] = 1;
  $node['uid'] = $user->uid;
  
  $xpath = xpath_new_context($dom);
  $record = $xpath->xpath_eval('//RECORD');
  foreach($record->nodeset as $rec) {
    $node_id = array_push($node_array, $node) - 1;
    $node_array[$node_id]['biblio_type'] = -2;
    $elements = $rec->get_elements_by_tagname('REFERENCE_TYPE');
    switch ((int) $elements[0]->get_content()) {
      case 0: // Journal Article
        $node_array[$node_id]['biblio_type'] = 1;
        break;
      case 2: // Thesis
        $node_array[$node_id]['biblio_type'] = 7;
        break;
      case 3: // Conference Proceeding
        $node_array[$node_id]['biblio_type'] = 2;
        break;
      case 7: // Book Section
        $node_array[$node_id]['biblio_type'] = 6;
        break;
      case 10: // Report
        $node_array[$node_id]['biblio_type'] = 5;
        break;
      case 15: // Patent
        $node_array[$node_id]['biblio_type'] = 8;
        break;
    } 
  
    $authors = "";
    $elements = $rec->get_elements_by_tagname('AUTHOR');
    foreach ($elements as $dom_node) {
      if ($authors) $authors .= "; ";
      $authors .= $dom_node->get_content();
    } 
  
    $node_array[$node_id]['biblio_authors'] = $authors;
    $sec_authors = "";
    $elements = $rec->get_elements_by_tagname('SECONDARY_AUTHOR');
    foreach ($elements as $dom_node) {
      if ($sec_authors) $sec_authors .= "; ";
      $sec_authors .= $dom_node->get_content();
    } 
    $node_array[$node_id]['biblio_secondary_authors'] = $sec_authors;
    $ter_authors = "";
    $elements = $rec->get_elements_by_tagname('TERTIARY_AUTHOR');
    foreach ($elements as $dom_node) {
      if ($ter_authors) $ter_authors .= "; ";
      $ter_authors .= $dom_node->get_content();
    } 
    $node_array[$node_id]['biblio_tertiary_authors'] = $ter_authors;
    $keywords = "";
    $elements = $rec->get_elements_by_tagname('KEYWORD');
    foreach ($elements as $dom_node) {
      if ($keywords) $keywords .= "; ";
      $keywords .= $dom_node->get_content();
    } 
    $node_array[$node_id]['biblio_keywords'] = $keywords;
    if ($elements = $rec->get_elements_by_tagname('YEAR')) 
      $node_array[$node_id]['biblio_year'] = (string)$elements[0]->get_content();
  
    if ($elements = $rec->get_elements_by_tagname('TITLE')) 
      $node_array[$node_id]['title'] = (string)$elements[0]->get_content();
  
    if ($elements = $rec->get_elements_by_tagname('PUBLISHER')) 
      $node_array[$node_id]['biblio_publisher'] = (string)$elements[0]->get_content();
      
    if ($elements = $rec->get_elements_by_tagname('ISBN')) 
      $node_array[$node_id]['biblio_isbn'] = (string)$elements[0]->get_content();
      
    if ($elements = $rec->get_elements_by_tagname('SECONDARY_TITLE')) 
      $node_array[$node_id]['biblio_secondary_title'] = (string)$elements[0]->get_content();
      
    if ($elements = $rec->get_elements_by_tagname('VOLUME')) 
      $node_array[$node_id]['biblio_volume'] = (string)$elements[0]->get_content();
      
    if ($elements = $rec->get_elements_by_tagname('PAGES')) 
      $node_array[$node_id]['biblio_pages'] = (string)$elements[0]->get_content();
      
    if ($elements = $rec->get_elements_by_tagname('ABSTRACT')) 
      $node_array[$node_id]['biblio_abst_e'] = (string)$elements[0]->get_content();
      
    if ($elements = $rec->get_elements_by_tagname('URL')) 
      $node_array[$node_id]['biblio_url'] = (string)$elements[0]->get_content();
  
    if ($elements = $rec->get_elements_by_tagname('NUMBER')) 
      $node_array[$node_id]['biblio_number'] = (string)$elements[0]->get_content();
  
    if ($elements = $rec->get_elements_by_tagname('NOTES')) 
      $node_array[$node_id]['biblio_notes'] = (string)$elements[0]->get_content();
  
    if ($elements = $rec->get_elements_by_tagname('PLACE_PUBLISHED')) 
      $node_array[$node_id]['biblio_place_published'] = (string)$elements[0]->get_content();
  
    if ($elements = $rec->get_elements_by_tagname('DATE')) 
      $node_array[$node_id]['biblio_date'] = (string)$elements[0]->get_content();
  } 
  
  $content = null;
  if (function_exists('node_save')) {
    foreach ($node_array as $node) {
      $node_obj = (object)$node;
      $nodeid = node_save($node_obj);
      if ($node_obj->nid) { 
         $content .= t('Successfully imported node' . l("$node_obj->nid", "node/$node_obj->nid")) . '<br>';
      }
    } 
  }
  return $content;   
 }else{
   $msg = "DOMXML php extension is not loaded, so you cannot import files in XML format";
   return $msg;
}

} 

function biblio_get_db_fields() {
return array('nid', 'biblio_type', 'biblio_number', 'biblio_other_number',
  'biblio_secondary_title', 'biblio_tertiary_title', 'biblio_authors',
  'biblio_secondary_authors', 'biblio_tertiary_authors', 'biblio_corp_author',
  'biblio_other_author_affiliations', 'biblio_edition', 'biblio_publisher',
  'biblio_place_published', 'biblio_year', 'biblio_volume', 'biblio_issue', 'biblio_pages', 'biblio_date',
  'biblio_isbn', 'biblio_lang', 'biblio_abst_e', 'biblio_abst_f',
  'biblio_full_text', 'biblio_keywords', 'biblio_url', 'biblio_call_number',
  'biblio_accession_number', 'biblio_type_of_work', 'biblio_notes');
} 
function _author_links($author) {
if (isset($_GET['sort'])) {
  $sort = "?sort=" . $_GET['sort'];
} 

$html = "";
$author_array = explode(";", $author);
foreach($author_array as $auth) {
  if ($i) $html .= "; ";
  $i++;
  if (strstr($auth, ",")) {
    $parts = split(",", $auth);
    $lastname = $parts[0];
  } else {
    $parts = split(" ", $auth);
    $lastname = end($parts);
  } 
  // list($lastname, $init) = split(",", $auth);
  $html .= l(trim($auth), 'biblio/author/' . trim($lastname) . $sort);
} 
return $html;
} 
function _parse_authors($authors) {
$and = array(" and", " And", " AND");
$authors = str_replace($and, ", ", $authors); // change the word "and" to a comma
$authors = str_replace(" ,", ",", $authors); // fix some potential typos
$authors = str_replace(",,", ",", $authors); // ditto 
// $authors = str_replace(";",",",$authors);
$chunks = explode(";", $authors); // split the authors on the semicolon
$num_chunks = count($chunks);
// print_r($chunks);
for($i = 0;
  $i < count($chunks);
  $i++) {
  $suffix = _get_suffix($chunks[$i]); // get and strip out the suffix
  $prefix = _get_prefix($chunks[$i]); // get and strip out the prefix
  if (strstr($chunks[$i], ",")) { // we probably have lastname first
    $subchunks = explode(",", trim($chunks[$i]));
    $lastname = $subchunks[0];
    $subchunks = explode(" ", trim($subchunks[1]));
    $initials = "";
    for ($j = 0;
      $j < count($subchunks) ;
      $j++) {
      if (substr_count($subchunks[$j], '.')) {
        $initials .= $subchunks[$j];
      } else {
        $initials .= drupal_substr($subchunks[$j], 0, 1) . ".";
      } 
    } 
  } else { // we have some form of firstname first (Fistname I. Lastname)
    $subchunks = explode(" ", trim($chunks[$i]));
    $lastname = end($subchunks);
    $initials = "";
    for ($j = 0;
      $j < count($subchunks) - 1 ;
      $j++) {
      if (substr_count($subchunks[$j], '.')) {
        $initials .= $subchunks[$j];
      } else {
        $initials .= drupal_substr($subchunks[$j], 0, 1) . ".";
      } 
    } 
  } 
  $chunks[$i] = trim($prefix . ' ' . $lastname . ', ' . $initials . ' ' . $suffix);
} 
return implode("; ", $chunks);
} 
function _get_suffix(&$name) {
$suffix = null;
if (preg_match("/[, \.]+(Jr|Sr|Snr)\.?\s*$/", $name, $match)) {
  $suffix = $match[0];
  $Text = str_replace($Suffix, "", $name);
} elseif (preg_match("/([, \.]+)(Jr|Sr|Snr)[. ]/", $name, $match)) {
  $suffix = $match[1];
  $name = str_replace($Suffix, "", $name);
} 

return $suffix;
} 
function _get_prefix(&$name) {
$prefix = null;
$name = " " . $name;
$prefs = array(" Van ", " van ", " von ", " den ", " der ", " de ", " De ", " ter ", " Ter ", "Vander ");
if (strstr($name, " Van ")) $prefix .= "Van ";
if (strstr($name, " van ")) $prefix .= "van ";
if (strstr($name, " Vander ")) $prefix .= "Vander ";
if (strstr($name, " von ")) $prefix .= "von ";
if (strstr($name, " de ")) $prefix .= "de ";
if (strstr($name, " De ")) $prefix .= "De ";
if (strstr($name, " den ")) $prefix .= "den ";
if (strstr($name, " der ")) $prefix .= "der ";
if (strstr($name, " ter ")) $prefix .= "ter ";
if (strstr($name, " Ter ")) $prefix .= "Ter ";
if (strlen($prefix)) $name = str_replace($prefs, "", $name);
$name = trim($name);
return $prefix;
} 
/**
 * Set an element's visibility. Elements are gnerally changed to hidden
 * elements. Visibility may be set and reset any number of times.
 *
 * @param $element
 *   The form element array to modify.
 * @param $visible
 *   The desired visibity of the form element.
 * @param $next_page
 *   Boolean value, TRUE if the next page is about to be rendered, FALSE otherwise.
 */

function _set_element_visibility(&$element, $visible) {
  _form_restore_attributes($element);
  if (!$visible) {
    switch ($element['#type']) {
      case 'textfield':
      case 'textarea':
      case 'select':
        _form_set_attribute($element, '#type', 'hidden');
        _form_set_attribute($element, '#required', FALSE);
        break;

      case 'radios':
        // Radios elements cannot be hidden unless they have been processed.
 //       if ($next_page) {
          _form_set_attribute($element, '#type', 'hidden');
          _form_set_attribute($element, '#required', FALSE);
//        }
        break;

      case 'radio':
      case 'checkbox':
        // We can't change these to hidden until right before the next page is rendered, otherwise
        // the value is lost sometimes.
 //       if ($next_page) {
          _form_set_attribute($element, '#type', 'hidden');
 //       }
        break;

      case 'fieldset':
        _form_set_attribute($element, '#type', NULL);
        break;

      case 'button':
 //       if ($next_page) {
          _form_set_attribute($element, '#type', 'value');
 //       }
        break;

      case 'submit':
 //       if ($next_page) {
          _form_set_attribute($element, '#type', 'button');
 //       }
        break;
    }
  }

  foreach (element_children($element) as $key) {
    _form_set_element_visibility($element[$key], $visible, $next_page);
  }
}
/**
 * Set an attribute on an element array with storing the previous value which
 * may be reverted to using multipage_form_restore_attributes().
 *
 * @param $element
 *   The form element array to modify.
 * @param $key
 *   A key of the form element array.
 * @param $new_value
 *   The new value for the attribute.
 */
function _form_set_attribute(&$element, $key, $new_value) {
  $element['#_form_original_'. $key] = $element[$key];
  $element[$key] = $new_value;
}

/**
 * Restore any form attributes which have been set using
 * multipage_form_set_attribute().
 *
 * @param $element
 *   The form element array to restore.
 */
function _form_restore_attributes(&$element) {
  foreach (array_filter(array_keys($element), create_function('$key', 'return (strpos($key, "#_form_original_") === 0);')) as $key) {
    $element[str_replace('#_form_original_', '', $key)] = $element[$key];
  }
}

