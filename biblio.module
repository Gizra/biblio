<?php
/**
 *   biblio.module for Drupal
 *
 *   Copyright (C) 2006-2011  Ron Jerome
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License along
 *   with this program; if not, write to the Free Software Foundation, Inc.,
 *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 */

/**
 * Implements hook_hook_info().
 */
function biblio_hook_info() {
  $hooks = array();

  $hooks['biblio_fields_info'] = array(
    'group' => 'biblio',
  );

  $hooks['biblio_types_info'] = array(
    'group' => 'biblio',
  );

  return $hooks;
}

/**
 * Implements hook_access().
 */
function biblio_access($op, $node = '') {
  global $user;

  switch ($op) {
    case 'admin':
      return user_access('administer biblio');
    case 'import':
      return user_access('import from file');
    case 'export':
      return user_access('show export links');
    case 'edit_author':
        if (user_access('administer biblio') || user_access('edit biblio authors')) return NODE_ACCESS_ALLOW;
        break;
    case 'download':
      if (user_access('show download links') || (user_access('show own download links') && ($user->uid == $node->uid))) return NODE_ACCESS_ALLOW;
      break;
    case 'rss':
      return variable_get('biblio_rss', 0);
    default:
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_permission().
 *
 * Since we are limiting the ability to create new nodes to certain users,
 * we need to define what those permissions are here. We also define a permission
 * to allow users to edit the nodes they created.
 */
function biblio_permission() {
  return array(
    'administer biblio' => array(
      'title' => t('Administer Biblio'),
      'description' => t('Allows full control (create, update, delete) of all Biblio nodes.'),
    ),
    'access biblio content' => array(
      'title' => t('Access Biblio content'),
      'description' => t('Allows the user to view Biblio nodes.'),
    ),
   'create biblio content' => array(
     'title' => t('Create Biblio'),
     'description' => t('Allows the user to create new Biblios.'),
   ),
   'edit all biblio entries' => array(
     'title' => t('Edit all Biblio entries'),
     'description' => t('Allows the user to edit ALL biblio entries regardless of who "owns" them, otherwise they are restricted to on.'),
   ),
   'edit own biblio entries' => array(
     'title' => t('Edit own Biblio entries'),
     'description' => t('Allows the user to edit their own biblio entries.'),
   ),
    'delete biblio entries' => array(
      'title' => t('Delete biblio entries'),
      'description' => t('Allows the user to delete any biblio entities.'),
    ),
    'delete own biblio entries' => array(
      'title' => t('Delete own biblio entries'),
      'description' => t('Allows the user to delete their own biblio entities.'),
    ),
    'edit by all biblio authors' => array(
      'title' => t('Edit by all Biblio authors'),
      'description' => t('Allows any/all of the authors associated with a biblio entry to edit the biblio entry. This requires the Drupal UserID be mapped to a Biblio author ID.'),
    ),
    'edit biblio authors' => array(
      'title' => t('Edit Biblio authors'),
      'description' => t('Allows the user to edit author information.'),
    ),
    'manage biblio structure' => array(
      'title' => t('Manage Biblio structure'),
      'description' => t('This determines if the user will be able to modify field and display settings for biblio and contributor entities (admin/structure/biblio).'),
    ),
    'manage biblio content' => array(
      'title' => t('Manage Biblio content'),
      'description' => t('This determines if the user will be able to access the managment interface for biblios and contributors (admin/content/biblio).'),
    ),
    'import from file' => array(
      'title' => t('Import from file'),
      'description' => t('Allows the user to import bibliographic data from files such as BibTex, RIS, EndNote.'),
    ),
    'show export links' => array(
      'title' => t('Show export links'),
      'description' => t('Allows users to see links which allow export of bibliographic data for an individual entry or the entire result set.'),
    ),
    'show download links' => array(
      'title' => t('Show download links'),
      'description' => t('Allows users to see links to any attachements associated with the Biblio entry.'),
    ),
    'show own download links' => array(
      'title' => t('Show own download links'),
      'description' => t('Allows user to only see download links on entries for which they are the owner.'),
    ),
    'show filter tab' => array(
      'title' => t('Show filter tab'),
      'description' => t('This determines if the "Filter" tab on the Biblio list page will be shown to the user.'),
    ),
    'show sort links' => array(
      'title' => t('Show sort links'),
      'description' => t('This determines if the "Sort" links on the Biblio list page will be shown to the user.'),
    ),
    'view full text' => array(
      'title' => t('Show full text'),
      'description' => t('This determines if the user will be able to access the "Full Text" of the article if it is available.'),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function biblio_ctools_plugin_api($module, $api) {
  if ($module == 'biblio' && $api == 'biblio_style') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function biblio_ctools_plugin_type() {
  $plugins['biblio_style'] = array(
    'classes' => array('class'),
    'process' => 'biblio_plugin_process',
  );
  return $plugins;
}


/**
 * Add defaults values to the notifier plugins.
 *
 * - 'description': The description of the plugin.
 */
function biblio_plugin_process(&$plugin, $info) {
  $plugin += array(
    'description' => '',
    'options' => array(),
    'assets' => array(
      'js' => array(),
      'css' => array(),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function biblio_ctools_plugin_directory($module, $plugin) {
  if ($module == 'biblio') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Get a loaded class from a style plugin.
 *
 * @todo: Add static cache.
 *
 * @param $style_name
 *   The style plugin name.
 * @return BiblioStyleInterface
 *   The Biblio style object.
 */
function biblio_get_class_from_style($style_name) {
  ctools_include('plugins');
  $plugin = biblio_get_biblio_style($style_name);
  $class = ctools_plugin_load_class('biblio', 'biblio_style', $style_name, 'class');

  return new $class($plugin);
}

/**
 * Helper function to include CTools plugins and get a notifier plguin.
 *
 * @param $plugin_name
 *   The plugin that should be laoded.
 */
function biblio_get_biblio_style($style_name) {
  ctools_include('plugins');
  return ctools_get_plugins('biblio', 'biblio_style', $style_name);
}

/**
 * Helper function to return only exportable biblio style.
 *
 * @param $style_name
 *   The plugin that should be loaded.
 * @return array
 */
function biblio_get_exportable_biblio_style($style_name) {
  $style = biblio_get_biblio_style($style_name);
  if (empty($style['export extension'])) {
    return;
  }
  return $style;
}

/**
 * Helper function to return only exportable biblio styles.
 */
function biblio_get_exportable_biblio_styles() {
  ctools_include('plugins');
  $exportable_plugins = array();
  foreach (biblio_get_biblio_styles() as $plugin_name => $style) {
    if (!empty($style['export extension'])) {
      $exportable_plugins[$plugin_name] = $style;
    }
  }
  return $exportable_plugins;
}

/**
 * Helper function to include CTools plugins and get all notifier plugins.
 */
function biblio_get_biblio_styles() {
  ctools_include('plugins');
  return ctools_get_plugins('biblio', 'biblio_style');
}

/**
 * Helper function to return all notifiers as options for a select list.
 *
 * @return array
 *  An array of biblio types for use in a field option list
 */
function biblio_get_notifiers_as_options() {
  $options = array();
  foreach (biblio_get_biblio_styles() as $style_name => $style) {
    $options[$style_name] = check_plain($style['title']);
  }

  return $options;
}

/**
 * Implements hook_views_api().
 */
function biblio_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'biblio') . '/includes/views',
  );
}

/**
 * Implements hook_migrate_api().
 */
function biblio_migrate_api() {
  $migrations = $groups = array();
  if (db_table_exists('_biblio_1x')) {
    $migrations['BiblioMigrateContributorCollections'] = array('class_name' => 'BiblioMigrateContributorCollections', 'group_name' => 'biblio_3');
    $migrations['BiblioMigrateTypes'] = array('class_name' => 'BiblioMigrateTypes', 'group_name' => 'biblio_3');
    $migrations['BiblioMigrateEntries'] = array('class_name' => 'BiblioMigrateEntries', 'group_name' => 'biblio_3');

    $groups = array(
      'biblio_3' => array(
        'title' => t('Biblio 3.x'),
      ),
    );
  }

  $api = array(
    'api' => 2,
    'migrations' => $migrations,
    'groups' => $groups,
  );
  return $api;
}

/**
 * Implements hook_entity_info().
 *
 * Inform the Drupal and the Field API about entity types.
 * Uses the contrib Entity API module to create entities
 */
function biblio_entity_info() {
  $return['biblio'] = array(
    'label' => t('Biblio'),
    'entity class' => 'Biblio',
    'controller class' => 'EntityAPIController',
    'views controller class' => 'EntityDefaultViewsController',
    'base table' => 'biblio',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'bid',
      'bundle' => 'type',
      'label' => 'title',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'load hook' => 'biblio_load',
    'view modes' => array(),
    // Entity API label callback that takes a look at our entity class method defaultLabel()
    'label callback' => 'entity_class_label',
    // This is also a standard Entity API callback for uri.
    // It executes our entity defaultUri() method
    'uri callback' => 'entity_class_uri',
    'module' => 'biblio',
    'access callback' => 'biblio_entity_access',
    'views controller class' => 'BiblioViewsController',
    'metadata controller class' => 'BiblioMetadataController',
  );

  // @todo: Biblio 1.x had a biblio type called "Biblio" if type was 0.
  $return['biblio']['bundles']['biblio'] = array('label' => 'Biblio');

  if (db_table_exists('biblio_type') && $bundles = biblio_types()) {
    foreach ($bundles as $bundle) {
      $return['biblio']['bundles'][$bundle->type] = array('label' => $bundle->name);
    }
  }

  $return['biblio_contributor'] = array(
    'label' => t('Contributor'),
    'entity class' => 'BiblioContributor',
    'controller class' => 'EntityAPIController',
    'base table' => 'biblio_contributor',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'cid',
      'label' => 'name',
    ),
    'bundles' => array(
      'contributor' => array(
        'label' => t('Contributor'),
      ),
    ),
    'load hook' => 'biblio_contributor_load',
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' => FALSE,
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'module' => 'biblio',
    'access callback' => 'biblio_entity_access',
    'inline entity form' => array(
      'controller' => 'BiblioContributorInlineEntityFormController',
    ),
  );


  return $return;
}

/**
 * Get the bundles of the biblio.
 *
 * @param string $type
 *  Optional; A specific type name.
 * @return array
 *  List of biblio types.
 */
function biblio_types($type = NULL) {
  $results = db_select('biblio_type')
    ->fields('biblio_type')
    ->execute()
    ->fetchAllAssoc('type');

  if (!empty($type)) {
    return isset($results[$type]) ? $results[$type] : array();
  }

  return $results;
}

/**
 * Save biblio type.
 *
 * @todo: When changing the machine name create a batch api that will update
 *  the biblio entries to the new bundle machine name.
 *
 * @param object $biblio_type
 *  The values of a biblio type.
 */
function biblio_type_save($biblio_type) {
  if (biblio_types($biblio_type->type)) {
    db_update('biblio_type')
      ->fields(array(
        'name' => $biblio_type->name,
        'description' => $biblio_type->description,
      )
    )
    ->condition('type', $biblio_type->type)
    ->execute();
  }
  else {
    db_insert('biblio_type')
      ->fields((array)$biblio_type)
      ->execute();

    // Attach the contributors field collection to the new biblio bundle.
    biblio_create_field('contributor_field_collection', 'biblio', $biblio_type->type);

    biblio_create_field('biblio_contributor_role', 'field_collection_item', 'contributor_field_collection');
    biblio_create_field('biblio_contributor', 'field_collection_item', 'contributor_field_collection');
  }
}

/**
 * Delete a biblio bundle.
 *
 * @param string $type
 *  The value of a biblio type.
 */
function biblio_type_delete($type) {
  $query = new entityFieldQuery();
  $number = $query
    ->entityCondition('entity_type', 'biblio')
    ->propertyCondition('type', $type)
    ->count()
    ->execute();

  if ($number) {
    throw new Exception(t("You cannot delete the bundle @type because there are biblio entries of this bundle."));
  }

  db_delete('biblio_type')
    ->condition('type', $type)
    ->execute();
}

/**
 * Access callback for the entity API.
 */
function biblio_entity_access($op, $type = NULL, $account = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }

  if (user_access('administer biblio', $account)) {
    return TRUE;
  }

  switch ($op) {
    case 'create':
      return user_access('create biblio', $account);
    case 'view':
      return user_access('access biblio content', $account);
    case 'delete':
    case 'update':
      return user_access('edit all biblio entries', $account);
  }
}

/**
 * Implements hook_biblio_insert().
 *
 * Save the path of the Biblio entry.
 */
function biblio_biblio_insert($biblio) {
  biblio_create_path($biblio);
}

/**
 * Implements hook_biblio_update().
 *
 * Update the path of the Biblio entry.
 */
function biblio_biblio_update($biblio) {
  biblio_create_path($biblio, 'update');
}

/**
 * Insert or update path alias.
 *
 * @param Biblio $biblio
 *   The Bilbio object.
 * @param $op
 *   The operation that invoked this function. Can be "insert" or "update".
 *   Defaults to "insert".
 */
function biblio_create_path(Biblio $biblio, $op = 'insert') {
  if (!module_exists('path')) {
    return;
  }

  if (isset($biblio->path)) {
    $path = $biblio->path;
    $path['alias'] = trim($path['alias']);

    if (!empty($path['alias']) || $op == 'update') {
      // Ensure fields for programmatic executions.
      $langcode = entity_language('biblio', $biblio);
      $path['source'] = 'biblio/' . $biblio->bid;
      $path['language'] = isset($langcode) ? $langcode : LANGUAGE_NONE;
      path_save($path);
    }
  }
}

/**
 * Implements hook_biblio_load().
 */
function biblio_biblio_load($biblios) {
  if (!module_exists('path')) {
    return;
  }

  foreach ($biblios as $biblio) {
    $conditions = array(
      'source' => 'biblio/' . $biblio->bid,
      'language' => LANGUAGE_NONE,
    );
    $biblio->path = path_load($conditions);
  }
}

/**
 * Implements hook_biblio_delete().
 */
function biblio_biblio_delete($biblio) {
  if (!module_exists('path')) {
    return;
  }

  $criteria = array(
    'source' => 'biblio/' . $biblio->bid,
    'language' => LANGUAGE_NONE,
  );
  path_delete($criteria);
}

/**
 * Create a biblio entity object
 *
 * @param $type
 *  The publication type of the biblio to be created (bundle)
 * @param array $values
 *  An associative array of any additional values to be set when creating this
 *  entity. These values will be carried throughout the biblio object's life.
 *  Example: $values['title'] => 'new publication';
 * @return Biblio
 *  The biblio object, with default values.
 */
function biblio_create($type, $values = array()) {
  if (empty($account)) {
    global $user;
    $account = clone $user;
  }
  $values['type'] = $type;
  $values['uid'] = $account->uid;
  $values += array(
    'created' => REQUEST_TIME,
    'changed' => REQUEST_TIME,
  );

  $values['type'] = $type;
  return entity_create('biblio', $values);
}

/**
 * Load a biblio object from the database.
 *
 * @param string $bid
 *   The biblio ID.
 *
 * @return object
 *   A fully-populated biblio object.
 */
function biblio_load($bid) {
  return entity_load_single('biblio', $bid);
}

/**
 * Load biblio entities from the database.
 *
 * This function should be used whenever you need to load more than one biblio
 * from the database. biblios are loaded into memory and will not require
 * database access if loaded again during the same page request.
 *
 * @see entity_load()
 *
 * @param array $bids
 *   An array of biblio IDs.
 * @param bool $reset
 *   Whether to reset the internal entity_load cache.
 *
 * @return
 *   An array of biblio objects indexed by bid.
 */
function biblio_load_multiple($bids = array(), $reset = FALSE) {
  return entity_load('biblio', $bids, array(), $reset);
}

/**
 * Create a contributor entity object.
 *
 * @param string $name
 *   The name of the contributor. If given, this function will parse out the
 *   author name and automatically fill in any associated fields (first name,
 *   last name, initials, etc.) and the type
 * @param array $values
 *
 * @return BiblioContributor
 *  The contributor entity object.
 */
function biblio_contributor_create($values = array()) {
  global $language;

  $values['type'] = 'biblio_contributor';
  $values += array(
    'language' => $language->language,
    'created' => REQUEST_TIME,
    'changed' => REQUEST_TIME,
    'prefix' => '',
    'lastname' => '',
    'initials' => '',
    'suffix' => '',
    'firstname' => '',
  );

  return entity_create('biblio_contributor', $values);
}

/**
 * Load a contributor.
 */
function biblio_contributor_load($cid) {
  return entity_load_single('biblio_contributor', $cid);
}

/**
 * Load multiple contributors based on certain conditions.
 */
function biblio_contributor_load_multiple($cids = array()) {
  return entity_load('biblio_contributor', $cids);
}

/**
 * Attach fields to bundles.
 *
 * @param $bundles
 *   Array with the bundles to process, or empty array to use all Biblio bundles.
 */
function biblio_create_fields_by_bundle($bundles = array(), $clear_cache = TRUE) {
  $entity_info = entity_get_info('biblio');
  $bundles = $bundles ? $bundles : array_keys($entity_info['bundles']);

  $fields_info = biblio_fields_info();
  foreach ($bundles as $bundle) {
    foreach ($fields_info as $field_name => $field_info) {
      if (in_array($field_name, array('biblio_contributor_role', 'biblio_contributor'))) {
        // @todo: Add better way to distniush fields that don't need to be
        // attached to the Biblio entity.
        continue;
      }

      if (!empty($field_info['bundles_info']) && isset($field_info['bundles_info'][$bundle])) {
        // Allow per bundle settings to override the instance's default settings.
        $field_info['instance'] = drupal_array_merge_deep($field_info['instance'], $field_info['bundles_info'][$bundle]);
        biblio_create_field($field_name, 'biblio', $bundle, $field_info, $clear_cache);
      }
      elseif (!isset($field_info['bundles_info'])) {
        biblio_create_field($field_name, 'biblio', $bundle, $field_info, $clear_cache);
      }
    }
  }
}

/**
 * Create a biblio field in a bundle.
 *
 * @param string $field_name
 *   The field name
 * @param string $entity_type
 *   The entity type
 * @param string $bundle
 *   The bundle name.
 * @param array $biblio_field
 *   Optional; Array with field definitions, to allow easier overriding by the
 *   caller. If empty, function will get the field info by calling
 *   biblio_fields_info() with the field name.
 */
function biblio_create_field($field_name, $entity_type, $bundle, $biblio_field = array(), $clear_cache = TRUE) {
  if (!$biblio_field && !$biblio_field = biblio_fields_info($field_name)) {
    return;
  }

  $field = field_info_field($field_name);
  // Allow overriding the field name.
  $biblio_field['field']['field_name'] = $field_name;
  if (empty($field)) {
    field_create_field($biblio_field['field']);
  }

  $instance = field_info_instance($entity_type, $field_name, $bundle);
  if (empty($instance)) {
    $instance = $biblio_field['instance'];
    $instance += array(
      'field_name' => $field_name,
      'bundle' => $bundle,
      'entity_type' => $entity_type,
    );

    field_create_instance($instance);

    if ($clear_cache) {
      field_cache_clear();
      entity_property_info_cache_clear();
    }
  }
}

/**
 * Get the field info.
 *
 * @param string $field_name
 *  The field name.
 *
 * @return array
 *   An array with the field and instance definitions, or FALSE if not found.
 */
function biblio_fields_info($field_name = NULL) {
  $return = &drupal_static(__FUNCTION__, array());

  if (empty($return)) {
    foreach (module_implements('biblio_fields_info') as $module) {
      if ($fields = module_invoke($module, 'biblio_fields_info')) {
        foreach ($fields as $key => $field) {
          // Add default values.
          $field += array(
            'entity type' => array(),
            'multiple' => FALSE,
            'description' => '',
          );

          // Add the module information.
          $return[$key] = array_merge($field, array('module' => $module));
        }
      }
    }

    // Allow other modules to alter the field info.
    drupal_alter('biblio_fields_info', $return);
  }

  if (!empty($field_name)) {
    return !empty($return[$field_name]) ?  $return[$field_name] : FALSE;
  }

  return $return;
}

/**
 * Create new Biblio bundles.
 *
 * @param Array $types
 *  List of specific types to create.
 *
 * @todo: Make the bundles configurable?
 */
function biblio_add_publication_types($types = array()) {
  foreach (biblio_get_types_info() as $type => $info) {

    if ($types && !in_array($type, $types)) {
      // The type was not specified in the list of types to enable. Skipping.
      continue;
    }

    $name = $info['name'];

    $row = new stdClass();
    $row->type = strtolower(str_replace(' ', '_', $name));
    $row->name = $name;
    $row->description = $info['description'];

    biblio_type_save($row);
  }
}

/**
 * Return default Biblio types definitions.
 *
 * @param $type
 *  Optional; The definition of the given type. If empty, all types will be
 *  returned.
 */
function biblio_get_types_info($type = NULL) {
  $return = &drupal_static(__FUNCTION__, array());

  if (empty($return)) {
    foreach (module_implements('biblio_types_info') as $module) {
      if ($types = module_invoke($module, 'biblio_types_info')) {
        foreach ($types as $key => $value) {

          // Add default values.
          $value += array(
            'description' => '',
            'style_info' => array(),
          );

          // Add the module information.
          $return[$key] = array_merge($value, array('module' => $module));
        }
      }
    }

    // Allow other modules to alter the field info.
    drupal_alter('biblio_types_info', $return);
  }

  if (!empty($type)) {
    return !empty($return[$type]) ?  $return[$type] : FALSE;
  }

  return $return;
}

/**
 * Implements hook_field_access().
 */
function biblio_field_access($op, $field, $entity_type, $entity, $account) {
  if ($field['field_name'] == 'biblio_first_letter') {
    return FALSE;
  }
}
