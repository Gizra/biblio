<?php
// $Id$
/*
 * @file
 * Base class for all biblio tests
 */
class BiblioWebTestCase extends DrupalWebTestCase {
  protected $kids = array();  //keep a list of all keyword id's created
  protected $cids = array();  //keep a list of all contributor id's created
  protected $nids = array();  //keep a list of all node id's created
  protected $admin_user;

  function cleanUp() {
    if(!empty($this->kids)){
      db_delete('biblio_keyword')
      ->condition('kid', $this->kids, 'IN')
      ->execute();

      db_delete('biblio_keyword_data')
      ->condition('kid', $this->kids, 'IN')
      ->execute();

    }

    foreach($this->nids as $nid) {
      node_delete($nid);
    }

    if(!empty($this->cids)) {
      db_delete('biblio_contributor')
      ->condition('cid', $this->cids, 'IN')
      ->execute();

      db_delete('biblio_contributor_data')
      ->condition('cid', $this->cids, 'IN')
      ->execute();

    }
    $this->cids = array();
  }


  function createNode($type = 100) {
    $schema = drupal_get_schema('biblio');
    foreach($schema['fields'] as $name => $values) {
      if ($values['type'] == 'int') continue;
      switch ($values['type']) {
        case 'varchar':
          $length = $values['length'];
          break;
        case 'text':
          $length = 1000;
          break;
      }
      $biblio_fields["$name"] = $name;
    }
    $settings = array(
      'title' => array(FIELD_LANGUAGE_NONE => array(array('value' => 'Biblio Title'))),
      'type' => 'biblio', // This replaces the default type
      'biblio_type' => $type, // This appends a new field.
      'biblio_year' => 2009,
      'biblio_contributors' => array(1 => array(0 => array('name' => 'Ron J. Jeromezzzzzz',  'auth_type' => 1),
                                                1 => array('name' => 'John Smithzzzzzz',  'auth_type' => 1),
                                                2 => array('name' => 'George W. Bushzzzzzz',  'auth_type' => 1)))
    );
    $settings = array_merge($biblio_fields, $settings);

    $node = $this->drupalCreateNode($settings);
//    $node->biblio_contributors[1][] = array('name' => 'Ron J. Jeromezzzzzz',  'auth_type' => 1);
//    $node->biblio_contributors[1][] = array('name' => 'John Smithzzzzzz',     'auth_type' => 1);
//    $node->biblio_contributors[1][] = array('name' => 'George W. Bushzzzzzz', 'auth_type' => 1);
   // node_save($node);
    $node = node_load($node->nid, NULL, TRUE);
    foreach($node->biblio_contributors[1] as $author) {
      $this->cids[] = $author['cid'];
    }

    $this->nids[] = $node->nid;

    return $node;

  }
  function assertBiblioFields($node1, $node2, $skip_fields = array(), $known_diffs = 0) {
    $fields = drupal_schema_fields_sql('biblio');
    $fields = array_diff($fields, $skip_fields);
    $count = 0;
    foreach($fields as $field) {
      if ($node1->$field != $node2->$field) {
        $this->assertIdentical($node1->$field, $node2->$field);
        $count++;
      }
    }
    $this->assertEqual($count, $known_diffs, "There were $count differences between the two nodes");
  }
}