<?php
/**
 * @file
 * Main functionality file for the biblio UI module.
 */

/**
 * Implements hook_menu().
 */
function biblio_ui_menu() {
  $items = array();

  $items['biblio/add'] = array(
    'title' => 'Add biblio entries',
    'description' => 'Select a biblio type to create an entry for.',
    'access arguments' => array('create biblio'),
    'page callback' => 'biblio_ui_add_biblio_list',
  );

  foreach (biblio_types() as $type => $info) {
    $items['biblio/add/' . $type] = array(
      'title' => $info->name,
      'description' => 'Create biblio entries.',
      'access arguments' => array('create biblio'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('biblio_ui_manage_biblio', $type),
    );
  }

  $items['biblio/%biblio'] = array(
    'title' => 'View',
    'access arguments' => array('view biblio'),
    'page callback' => 'biblio_ui_view_biblio',
    'page arguments' => array(1),
  );

  $items['biblio/%biblio/view'] = array(
    'title' => 'View',
    'access arguments' => array('view biblio'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('biblio_ui_manage_biblio', 1),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => '50',
  );

  $items['biblio/%biblio/edit'] = array(
    'title' => 'Edit',
    'description callback' => 'biblio_ui_description_callback',
    'description arguments' => array(1, 'edit'),
    'access arguments' => array('edit biblio'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('biblio_ui_manage_biblio', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => '60',
  );

  $items['biblio/%biblio/delete'] = array(
    'title' => 'Delete',
    'description callback' => 'biblio_ui_description_callback',
    'description arguments' => array(1, 'delete'),
    'access arguments' => array('delete biblio'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('biblio_ui_delete_biblio', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => '70',
  );

  if (module_exists('devel')) {
    $items['biblio/%biblio/devel'] = array(
      'title' => 'Devel',
      'page callback' => 'devel_load_object',
      'page arguments' => array('biblio', 1),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'devel.pages.inc',
      'file path' => drupal_get_path('module', 'devel'),
      'weight' => 80,
    );
  }

  $items['biblio/import'] = array(
    'title' => 'Import biblio entries',
    'description' => 'Import publications in various styles.',
    'access arguments' => array('create biblio'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('biblio_ui_import_biblio'),
    'file' => 'biblio_ui.pages.inc',
  );

  $items['admin/structure/biblio'] = array(
    'title' => 'Biblio types',
    'description' => 'Manage biblio types',
    'access arguments' => array('administer biblio'),
    'page callback' => 'biblio_ui_manage_bundles',
  );

  $items['admin/structure/biblio/add'] = array(
    'title' => 'Add biblio type',
    'description' => 'Manage biblio types',
    'access arguments' => array('administer biblio'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('biblio_ui_manage_bundles_manage'),
    'type' => MENU_LOCAL_ACTION,
  );

  foreach (biblio_types() as $biblio_type) {
    $items['admin/structure/biblio/' . $biblio_type->type] = array(
      'title' => $biblio_type->name,
      'access arguments' => array('manage biblio structure'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('biblio_ui_manage_bundles_manage', 3),
    );

    $items['admin/structure/biblio/' . $biblio_type->type . '/edit'] = array(
      'title' => 'Edit',
      'access arguments' => array('manage biblio structure'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('biblio_ui_manage_bundles_manage', 3),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 0,
    );

    $items['admin/structure/biblio/' . $biblio_type->type . '/delete'] = array(
      'title' => 'Delete',
      'access callback' => 'biblio_ui_can_delete_bundle',
      'access arguments' => array($biblio_type->type),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('biblio_ui_delete_bundle', $biblio_type->type),
      'type' => MENU_LOCAL_TASK,
      'weight' => 1,
    );

    $items['admin/config/content/biblio'] = array(
      'title' => 'Biblio settings',
      'description' => 'Configure Biblio settings.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('biblio_ui_admin_form'),
      'access arguments' => array('administer biblio'),
      'file' => 'biblio_ui.admin.inc'
    );
  }

  return $items;
}

/**
 * Access callback which determine if the bundle can be deleted.
 */
function biblio_ui_can_delete_bundle($bundle, $account = NULL) {
  global $user;
  $account = (!$account) ? user_load($user->uid) : user_load($account->uid);

  $query = new entityFieldQuery();
  $number = $query
    ->entityCondition('entity_type', 'biblio')
    ->propertyCondition('type', $bundle)
    ->count()
    ->execute();

  return !($number && user_access('manage biblio structure'));
}

/**
 * Implements hook_admin_paths().
 */
function biblio_ui_admin_paths() {
  return array(
    'biblio/add' => TRUE,
    'biblio/add/*' => TRUE,
    'biblio/*/edit' => TRUE,
    'biblio/*/delete' => TRUE,
    'biblio/*/devel' => TRUE,
  );
}

/**
 * Implements hook_theme().
 */
function biblio_ui_theme() {
  return array(
    'biblio_ui_add_biblio_list' => array(),
    'biblio_ui_bundle_overview' => array(),
  );
}

/**
 * Implements hook_uninstall();
 */
function biblio_ui_uninstall() {
  variable_del('biblio_debug');
}

/**
 * Generating a description for page when editing or deleting a biblio.
 *
 * @param $biblio
 *  The biblio object.
 * @param $action
 *  The action: delete or edit.
 *
 * @return
 *  The title which the page should present.
 */
function biblio_ui_description_callback($biblio, $action) {
  return t('@action @title', array(
    '@action' => $action == 'edit' ? 'Editing' : 'Deleting',
    '@title' => $biblio->title,
  ));
}

/**
 * Implements hook_entity_info_alter().
 */
function biblio_ui_entity_info_alter(&$info) {
  if (!$biblio_types = biblio_types()) {
    return;
  }

  foreach ($biblio_types as $bundle) {
    $info['biblio']['bundles'][$bundle->type] = array(
      'label' => $bundle->name,
      'admin' => array(
        'path' => 'admin/structure/biblio/' . $bundle->type,
        'real path' => 'admin/structure/biblio/' . str_replace('_', '-', $bundle->type),
        'access arguments' => array('manage biblio structure'),
      ),
    );
  }
}

/**
 * Implements hook_views_api().
 */
function biblio_ui_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'biblio_ui') . '/includes/views',
  );
}

/**
 * Display a list of biblio types for creating an entry.
 */
function biblio_ui_add_biblio_list() {
  $types = biblio_types();

  return theme('biblio_ui_add_biblio_list', array(
    'types' => $types,
  ));
}

/**
 * Theme callback - display a list of the biblio entry a user can create.
 */
function theme_biblio_ui_add_biblio_list($variables) {
  $types = $variables['types'];

  if ($types) {
    $output = '<ul class="admin-list">';
    foreach ($types as $type => $info) {
      $output .= '<li class="clearfix">';
      $output .= '<span class="label">' . l($info->name, 'biblio/add/' . $type) . '</span>';
      $output .= '<div class="description">' . filter_xss_admin($info->description) . '</div>';
      $output .= '</li>';
    }
    $output .= '</ul>';
  }
  else {
    $output = '<p>' . t('There is no bilbio types. Go to the <a href="@url">biblio types create page</a> to add a new biblio type.', array('@url' => url('admin/structure/biblio'))) . '</p>';
  }
  return $output;
}

/**
 * Viewing a biblio entity entry.
 */
function biblio_ui_view_biblio($biblio) {
  $wrapper = entity_metadata_wrapper('biblio', $biblio);
  $info = $wrapper->view();
  $content = $info['biblio'][$wrapper->getIdentifier()];

  return render($content);
}

/**
 * Form for creating a biblio entry.
 */
function biblio_ui_manage_biblio($form, &$form_state, $type) {
  global $user;

  $account = user_load($user->uid);

  $biblio = !is_object($type) ? biblio_create($type) :  $type;

  $form_state['#entity'] = $biblio;

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => TRUE,
    '#weight' => -10,
    '#default_value' => !empty($biblio->title) ? $biblio->title : '',
  );

  field_attach_form('biblio', $biblio, $form, $form_state);

  // Show publication year only if biblio status is "published".
  $form['biblio_year']['#states'] = array(
    'visible' => array(
      ':input[name="biblio_status[und]"]' => array('value' => 'published'),
    ),
  );

  $form['additional_settings'] = array(
    '#type' => 'vertical_tabs',
    '#weight' => 99,
  );

  $form['owner'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authoring information'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#attributes' => array(
      'class' => array('biblio-form-owner'),
    ),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'biblio_ui') . '/js/biblio_ui.js',
        array(
          'type' => 'setting',
          'data' => array('anonymous' => variable_get('anonymous', t('Anonymous'))),
        ),
      ),
    ),
    '#weight' => 90,
  );

  $form['owner']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Created by'),
    '#maxlength' => 60,
    '#autocomplete_path' => 'user/autocomplete',
    '#default_value' => !empty($biblio->uid) ? user_load($biblio->uid)->name : $account->name,
    '#weight' => -1,
    '#description' => t('Leave blank for %anonymous.', array('%anonymous' => variable_get('anonymous', t('Anonymous')))),
  );

  $form['published'] = array(
    '#type' => 'fieldset',
    '#title' => t('Published'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#weight' => 100,
  );

  $timestamp_property = empty($biblio->is_new) ? 'changed' : 'created';

  $form['published']['created'] = array(
    '#type' => 'textfield',
    '#date_format' => 'Y-m-d G:i',
    '#title' => t('Published time'),
    '#default_value' => date('Y-m-d H:i', $biblio->{$timestamp_property}),
  );

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Send'),
    ),
    'cancel' => array(
      '#markup' => l(t('Cancel'), 'biblio'),
    ),
  );

  return $form;
}

/**
 * Validate the submitted biblio.
 *
 * Make sure that year has value, unless "In press" or "Submitted" or checked.
 */
function biblio_ui_manage_biblio_validate($form, &$form_state) {
  field_attach_form_validate('biblio', $form_state['#entity'], $form, $form_state);

  if (isset($form_state['values']['biblio_year'][LANGUAGE_NONE][0]['value']) && is_numeric($form_state['values']['biblio_year'][LANGUAGE_NONE][0]['value'])) {
    // Year has value.
    return;
  }

  if ($form_state['values']['biblio_status'][LANGUAGE_NONE][0]['value'] != 'published') {
    // "In press" or "Submitted" are checked.
    return;
  }

  form_set_error('biblio_year', t('Year is required if Publication status is "Published".'));

}

/**
 * Save the form biblio.
 */
function biblio_ui_manage_biblio_submit($form, &$form_state) {
  $biblio = $form_state['#entity'];

  field_attach_submit('biblio', $biblio, $form, $form_state);

  $biblio->title = $form_state['values']['title'];

  $timestamp_property = empty($biblio->is_new) ? 'changed' : 'created';

  $biblio->{$timestamp_property} = strtotime($form_state['values']['created']);
  $biblio->uid = user_load_by_name($form_state['values']['name'])->uid;

  $biblio->save();

  $form_state['redirect'] = 'biblio/' . $biblio->bid;
}

/**
 * Form for deleting the a biblio entry.
 */
function biblio_ui_delete_biblio($form, $form_state, $biblio) {
  // When the bundle is exported - display a message to the user.
  $form_state['#entity'] = $biblio;

  // Always provide entity id in the same form key as in the entity edit form.
  return confirm_form($form,
    t('Are you sure you want to delete @title?',
      array('@title' => $biblio->title)),
    'biblio',
    t('Are you sure you want to delete this biblio entry? This action cannot be undone.'),
    t('Delete'),
    t('Cancel'));
  return $form;
}

/**
 * Delete the biblio entry.
 */
function biblio_ui_delete_biblio_submit($form, &$form_state) {
  $biblio = $form_state['#entity'];
  $biblio->delete();

  $form_state['redirect'] = 'biblio';
}

/**
 * Display list of bundles the user can manage.
 */
function biblio_ui_manage_bundles() {
  $bundles = biblio_types();

  $data = array();
  foreach ($bundles as $i => $bundle) {
    $links = array();

    $data[$i] = array(
      theme('biblio_ui_bundle_overview', array('bundle' => $bundle)),
      l(t('Edit'), 'admin/structure/biblio/' . $bundle->type),
      l(t('Manage fields'), 'admin/structure/biblio/' . $bundle->type . '/fields'),
      l(t('Manage display'), 'admin/structure/biblio/' . $bundle->type . '/display'),
    );

    $data[$i][] = biblio_ui_can_delete_bundle($bundle->type) ? l(t('Delete'), 'admin/structure/biblio/' . $bundle->type . '/delete') : '';
  }

  $headers = array(
    t('Name'),
    array('data' => t('Operations'), 'colspan' => 5, 'width' => '50%')
  );

  $output = theme('table', array('header' => $headers, 'rows' => $data));

  return $output;
}

/**
 * Theme callback - display a small description of the biblio bundle.
 */
function theme_biblio_ui_bundle_overview($variables) {
  $bundle = $variables['bundle'];

  $output = check_plain($bundle->name);
  $output .= ' <small>' . t('(Machine name: @type)', array('@type' => $bundle->type)) . '</small>';
  $output .= '<div class="description">' . filter_xss_admin($bundle->description) . '</div>';

  return $output;
}

/**
 * Managing bundles - creating bundles(i.e biblio types).
 */
function biblio_ui_manage_bundles_manage($form, $form_state, $data = '') {
  if ($data) {
    $info = biblio_types($data);
    $name = $info->name;
    $machine = $info->type;
    $description = $info->description;
    $form_state['op'] = 'edit';
  }
  else {
    $name = '';
    $machine = '';
    $description = '';
    $form_state['op'] = 'create';
  }
  $form['name'] = array(
    '#title' => t('Name'),
    '#type' => 'textfield',
    '#default_value' => $name,
    '#description' => t('The human readable name of the biblio type.'),
    '#required' => TRUE,
    '#size' => 30,
  );

  $form['type'] = array(
    '#type' => 'machine_name',
    '#default_value' => $machine,
    '#maxlength' => 32,
    '#machine_name' => array(
      'exists' => 'biblio_types',
    ),
    '#description' => t('A machine readable name of the biblio type.'),
  );

  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#description' => t('A short description about the new biblio type.'),
    '#required' => TRUE,
    '#default_value' => $description,
  );

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Save'),
    ),
    'cancel' => array(
      '#markup' => l(t('Cancel'), 'admin/structure/biblio'),
    ),
  );

  return $form;
}

/**
 * Creating/saving the new biblio type.
 */
function biblio_ui_manage_bundles_manage_submit($form, &$form_state) {
  $values = (object)array(
    'type' => $form_state['values']['type'],
    'name' => $form_state['values']['name'],
    'description' => $form_state['values']['description'],
  );
  biblio_type_save($values);

  $form_state['redirect'] = 'admin/structure/biblio';

  drupal_set_message(t('The bundle @title was created successfully.', array(
    '@title' => $form_state['values']['name'],
  )));
}

/**
 * Delete the a biblio entry.
 */
function biblio_ui_delete_bundle($form, &$form_state, $type) {
  // When the bundle is exported - display a message to the user.
  $type = biblio_types($type);
  $form_state['#type'] = $type;

  // Always provide entity id in the same form key as in the entity edit form.
  return confirm_form($form,
    t('Are you sure you want to delete the bundle @title?',
      array('@title' => $type->name)),
    'admin/structure/biblio',
    t('Are you sure you want to delete this biblio type? This action cannot be undone.'),
    t('Delete'),
    t('Cancel'));
}

/**
 * Delete the biblio bundle.
 */
function biblio_ui_delete_bundle_submit($form, $form_state) {
  biblio_type_delete($form_state['#type']->type);

  drupal_set_message(t('The bundle @title was deleted successfully.', array(
    '@title' => $form_state['#type']->name,
  )));
}
