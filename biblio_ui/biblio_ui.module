<?php
/**
 * @file
 * Main functionality file for the biblio UI module.
 */


/**
 * Implements hook_menu().
 */
function biblio_ui_menu() {
  $items = array();

  $items['admin/biblio'] = array(
    'title' => 'Biblio',
    'description' => 'Manage biblio',
    'access arguments' => array('administer biblio'),
    'page callback' => 'biblio_ui_manage',
  );

  $items['admin/biblio/add'] = array(
    'title' => 'Add biblio entries',
    'description' => 'Select a biblio type to create an entry for.',
    'access arguments' => array('create biblio'),
    'page callback' => 'biblio_ui_add_biblio_list',
    'type' => MENU_LOCAL_ACTION,
  );

  foreach (biblio_types() as $type => $info) {
    $items['admin/biblio/add/' . $type] = array(
      'title' => $info['title'],
      'description' => 'Create biblio entries.',
      'access arguments' => array('create biblio'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('biblio_ui_manage_biblio', $type),
    );
  }

  $items['biblio/%biblio'] = array(
    'title' => 'View',
    'access arguments' => array('view biblio'),
    'page callback' => 'biblio_ui_view_biblio',
  );

  $items['biblio/%biblio/view'] = array(
    'title' => 'View',
    'access arguments' => array('view biblio'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('biblio_ui_manage_biblio', 1),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => '50',
  );

  $items['biblio/%biblio/edit'] = array(
    'title' => 'Edit',
    'description callback' => 'biblio_ui_description_callback',
    'description arguments' => array(1, 'edit'),
    'access arguments' => array('edit biblio'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('biblio_ui_manage_biblio', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => '60',
  );

  $items['biblio/%biblio/delete'] = array(
    'title' => 'Delete',
    'description callback' => 'biblio_ui_description_callback',
    'description arguments' => array(1, 'delete'),
    'access arguments' => array('delete biblio'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('biblio_ui_delete_biblio', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => '70',
  );

  if (module_exists('devel')) {
    $items['biblio/%biblio/devel'] = array(
      'title' => 'Devel',
      'page callback' => 'devel_load_object',
      'page arguments' => array('biblio', 1),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'devel.pages.inc',
      'file path' => drupal_get_path('module', 'devel'),
      'weight' => 80,
    );
  }


  $items['admin/structure/biblio'] = array(
    'title' => 'Biblio types',
    'description' => 'Manage biblio types',
    'access arguments' => array('administer biblio'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('biblio_ui_manage_bundles'),
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function biblio_ui_admin_paths() {
  return array(
    'biblio/*/edit' => TRUE,
    'biblio/*/delete' => TRUE,
    'biblio/*/devel' => TRUE,
  );
}

/**
 * Implements hook_theme().
 */
function biblio_ui_theme() {
  return array(
    'biblio_ui_add_biblio_list' => array(),
  );
}

/**
 * Generating a description for page when editing or deleting a biblio.
 *
 * @param $biblio
 *  The biblio object.
 * @param $action
 *  The action: delete or edit.
 *
 * @return
 *  The title which the page should present.
 */
function biblio_ui_description_callback($biblio, $action) {
  return t('@action @title', array(
    '@action' => $action == 'edit' ? 'Editing' : 'Deleting',
    '@title' => $biblio->title,
  ));
}

/**
 * Manage the biblio entries in you site.
 */
function biblio_ui_manage() {
  // Pager settings.
  $per_page = 25;
  $page = !isset($_GET['page']) ? 0 : $_GET['page'];

  // Query.
  $query = new entityFieldQuery();

  $query
    ->entityCondition('entity_type', 'biblio')
    ->propertyOrderBy('changed', 'ASC');

  $total_query = clone $query;

  // Adding the type of the message.
  if (isset($_GET['type'])) {
    $query->propertyCondition('type', $_GET['type']);
  }

  $result = $query
    ->range($page * $per_page, $per_page)
    ->execute();

  $header = array(
    array('data' => t('Title'), 'width' => '20%'),
    array('data' => t('Type'), 'width' => '20%'),
    array('data' => t('Author'), 'width' => '20%'),
    array('data' => t('Published'), 'width' => '20%'),
    array('data' => t('Options'), 'width' => '20%'),
  );

  if (empty($result['biblio'])) {
    $rows[] = array(array(
      'data' => t("It seems you don't have any biblio entries. You can <a href='!link'>add more biblio entries</a>", array(
        '!link' => url('admin/biblio/add'),
      )),
      'colspan' => count($header),
    ));
  }
  else {
    $biblios = biblio_load_multiple(array_keys($result['biblio']));

    $total_biblio = $total_query
      ->count()
      ->execute();

    pager_default_initialize($total_biblio, $per_page);

    foreach ($biblios as $biblio) {
      $user_uri = entity_uri('user', user_load($biblio->uid));
      $biblio_uri = entity_uri('biblio', $biblio);

      $links = array();
      if (user_access('delete biblio')) {
        $links[] = array('title' => t('Delete'), 'href' => 'biblio/' . $biblio->bid . '/delete');
      }
      if (user_access('edit biblio')) {
        $links[] = array('title' => t('Edit'), 'href' => 'biblio/' . $biblio->bid . '/edit');
      }
      if (module_exists('devel') && user_access('access devel information')) {
        $links[] = array('title' => t('Devel'), 'href' => 'biblio/' . $biblio->bid . '/devel');
      }

      $rows[] = array(
        l($biblio->title, $biblio_uri['path']),
        $biblio->type,
        l($user_uri['options']['entity']->name, $user_uri['path']),
        date('Y-m-d H:i', $biblio->created),
        theme('links', array(
          'links' => $links,
          'attributes' => array('class' => array('links', 'inline'))
        )),
      );
    }
  }

  $output = theme('table', array('header' => $header, 'rows' => $rows));
  $output .= theme('pager');

  return $output;
}

/**
 * Display a list of biblio types for creating an entry.
 */
function biblio_ui_add_biblio_list() {
  $types = biblio_types();

  return theme('biblio_ui_add_biblio_list', array(
    'types' => $types,
  ));
}

/**
 * Theme callback - display a list of the biblio entry a user can create.
 */
function theme_biblio_ui_add_biblio_list($variables) {
  $types = $variables['types'];

  if ($types) {
    $output = '<ul class="admin-list">';
    foreach ($types as $type => $info) {
      $output .= '<li class="clearfix">';
      $output .= '<span class="label">' . l($info['title'], 'admin/biblio/add/' . $type) . '</span>';
      $output .= '<div class="description">' . filter_xss_admin($info['description']) . '</div>';
      $output .= '</li>';
    }
    $output .= '</ul>';
  }
  else {
    $output = '<p>' . t('There is no bilbio types. Go to the <a href="@url">biblio types create page</a> to add a new biblio type.', array('@url' => url('admin/structure/biblio'))) . '</p>';
  }
  return $output;
}

/**
 * Viewing a biblio entity entry.
 */
function biblio_ui_view_biblio($biblio) {
  dpm($biblio);
  return 'a';
}

/**
 * Form for creating a biblio entry.
 */
function biblio_ui_manage_biblio($form, &$form_state, $type) {
  global $user;

  $account = user_load($user->uid);

  $biblio = !is_object($type) ? biblio_create($type) :  $type;

  $form_state['#entity'] = $biblio;

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => TRUE,
    '#weight' => -10,
    '#default_value' => !empty($biblio->title) ? $biblio->title : '',
  );

  field_attach_form('biblio', $biblio, $form, $form_state);

  $form['additional_settings'] = array(
    '#type' => 'vertical_tabs',
    '#weight' => 99,
  );

  $form['owner'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authoring information'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#attributes' => array(
      'class' => array('biblio-form-owner'),
    ),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'biblio_ui') . '/js/biblio_ui.js',
        array(
          'type' => 'setting',
          'data' => array('anonymous' => variable_get('anonymous', t('Anonymous'))),
        ),
      ),
    ),
    '#weight' => 90,
  );

  $form['owner']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Created by'),
    '#maxlength' => 60,
    '#autocomplete_path' => 'user/autocomplete',
    '#default_value' => !empty($biblio->uid) ? user_load($biblio->uid)->name : $account->name,
    '#weight' => -1,
    '#description' => t('Leave blank for %anonymous.', array('%anonymous' => variable_get('anonymous', t('Anonymous')))),
  );

  $form['published'] = array(
    '#type' => 'fieldset',
    '#title' => t('Published'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#weight' => 100,
  );

  $timestamp_property = empty($biblio->is_new) ? 'changed' : 'created';

  $form['published']['created'] = array(
    '#type' => 'textfield',
    '#date_format' => 'Y-m-d G:i',
    '#title' => t('Published time'),
    '#default_value' => date('Y-m-d H:i', $biblio->{$timestamp_property}),
  );

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Send'),
    ),
    'cancel' => array(
      '#markup' => l(t('Cancel'), 'admin/biblio'),
    ),
  );

  return $form;
}

/**
 * Validate the submitted biblio.
 */
function biblio_ui_manage_biblio_validate($form, &$form_state) {
  field_attach_form_validate('biblio', $form_state['#entity'], $form, $form_state);
}

/**
 * Save the form biblio.
 */
function biblio_ui_manage_biblio_submit($form, &$form_state) {
  $biblio = $form_state['#entity'];

  field_attach_submit('biblio', $biblio, $form, $form_state);

  $biblio->title = $form_state['values']['title'];

  $timestamp_property = empty($biblio->is_new) ? 'changed' : 'created';

  $biblio->{$timestamp_property} = strtotime($form_state['values']['created']);
  $biblio->uid = user_load_by_name($form_state['values']['name'])->uid;

  $biblio->save();

  $form_state['redirect'] = 'admin/biblio';
}

/**
 * Form for deleting the a biblio entry.
 */
function biblio_ui_delete_biblio($form, $form_state, $biblio) {
  // When the bundle is exported - display a message to the user.
  $form_state['#entity'] = $biblio;

  // Always provide entity id in the same form key as in the entity edit form.
  return confirm_form($form,
    t('Are you sure you want to delete @title?',
      array('@title' => $biblio->title)),
    'admin/biblio',
    t('Are you sure you want to delete this biblio entry? This action cannot be undone.'),
    t('Delete'),
    t('Cancel'));
  return $form;
}

/**
 * Delete the biblio entry.
 */
function biblio_ui_delete_biblio_submit($form, &$form_state) {
  $biblio = $form_state['#entity'];
  $biblio->delete();

  $form_state['redirect'] = 'admin/content/biblio';
}
